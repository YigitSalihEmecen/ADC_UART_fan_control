
EP2_Final_Exam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065cc  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006938  08006938  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006940  08006940  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000018  08006960  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08006960  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b10  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002805  00000000  00000000  00033b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  000363a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d81  00000000  00000000  00037500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e75  00000000  00000000  00038281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001422a  00000000  00000000  0005a0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d62b0  00000000  00000000  0006e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a60  00000000  00000000  001445d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00149030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006744 	.word	0x08006744

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08006744 	.word	0x08006744

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_d2uiz>:
 80009bc:	004a      	lsls	r2, r1, #1
 80009be:	d211      	bcs.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c4:	d211      	bcs.n	80009ea <__aeabi_d2uiz+0x2e>
 80009c6:	d50d      	bpl.n	80009e4 <__aeabi_d2uiz+0x28>
 80009c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d40e      	bmi.n	80009f0 <__aeabi_d2uiz+0x34>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	fa23 f002 	lsr.w	r0, r3, r2
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d102      	bne.n	80009f6 <__aeabi_d2uiz+0x3a>
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	4770      	bx	lr
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	4770      	bx	lr

080009fc <__aeabi_uldivmod>:
 80009fc:	b953      	cbnz	r3, 8000a14 <__aeabi_uldivmod+0x18>
 80009fe:	b94a      	cbnz	r2, 8000a14 <__aeabi_uldivmod+0x18>
 8000a00:	2900      	cmp	r1, #0
 8000a02:	bf08      	it	eq
 8000a04:	2800      	cmpeq	r0, #0
 8000a06:	bf1c      	itt	ne
 8000a08:	f04f 31ff 	movne.w	r1, #4294967295
 8000a0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a10:	f000 b970 	b.w	8000cf4 <__aeabi_idiv0>
 8000a14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a1c:	f000 f806 	bl	8000a2c <__udivmoddi4>
 8000a20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a28:	b004      	add	sp, #16
 8000a2a:	4770      	bx	lr

08000a2c <__udivmoddi4>:
 8000a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a30:	9e08      	ldr	r6, [sp, #32]
 8000a32:	460d      	mov	r5, r1
 8000a34:	4604      	mov	r4, r0
 8000a36:	460f      	mov	r7, r1
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d14a      	bne.n	8000ad2 <__udivmoddi4+0xa6>
 8000a3c:	428a      	cmp	r2, r1
 8000a3e:	4694      	mov	ip, r2
 8000a40:	d965      	bls.n	8000b0e <__udivmoddi4+0xe2>
 8000a42:	fab2 f382 	clz	r3, r2
 8000a46:	b143      	cbz	r3, 8000a5a <__udivmoddi4+0x2e>
 8000a48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a4c:	f1c3 0220 	rsb	r2, r3, #32
 8000a50:	409f      	lsls	r7, r3
 8000a52:	fa20 f202 	lsr.w	r2, r0, r2
 8000a56:	4317      	orrs	r7, r2
 8000a58:	409c      	lsls	r4, r3
 8000a5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a5e:	fa1f f58c 	uxth.w	r5, ip
 8000a62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a66:	0c22      	lsrs	r2, r4, #16
 8000a68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a70:	fb01 f005 	mul.w	r0, r1, r5
 8000a74:	4290      	cmp	r0, r2
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x62>
 8000a78:	eb1c 0202 	adds.w	r2, ip, r2
 8000a7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a80:	f080 811c 	bcs.w	8000cbc <__udivmoddi4+0x290>
 8000a84:	4290      	cmp	r0, r2
 8000a86:	f240 8119 	bls.w	8000cbc <__udivmoddi4+0x290>
 8000a8a:	3902      	subs	r1, #2
 8000a8c:	4462      	add	r2, ip
 8000a8e:	1a12      	subs	r2, r2, r0
 8000a90:	b2a4      	uxth	r4, r4
 8000a92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a9e:	fb00 f505 	mul.w	r5, r0, r5
 8000aa2:	42a5      	cmp	r5, r4
 8000aa4:	d90a      	bls.n	8000abc <__udivmoddi4+0x90>
 8000aa6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aaa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aae:	f080 8107 	bcs.w	8000cc0 <__udivmoddi4+0x294>
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	f240 8104 	bls.w	8000cc0 <__udivmoddi4+0x294>
 8000ab8:	4464      	add	r4, ip
 8000aba:	3802      	subs	r0, #2
 8000abc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac0:	1b64      	subs	r4, r4, r5
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	b11e      	cbz	r6, 8000ace <__udivmoddi4+0xa2>
 8000ac6:	40dc      	lsrs	r4, r3
 8000ac8:	2300      	movs	r3, #0
 8000aca:	e9c6 4300 	strd	r4, r3, [r6]
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	d908      	bls.n	8000ae8 <__udivmoddi4+0xbc>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	f000 80ed 	beq.w	8000cb6 <__udivmoddi4+0x28a>
 8000adc:	2100      	movs	r1, #0
 8000ade:	e9c6 0500 	strd	r0, r5, [r6]
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae8:	fab3 f183 	clz	r1, r3
 8000aec:	2900      	cmp	r1, #0
 8000aee:	d149      	bne.n	8000b84 <__udivmoddi4+0x158>
 8000af0:	42ab      	cmp	r3, r5
 8000af2:	d302      	bcc.n	8000afa <__udivmoddi4+0xce>
 8000af4:	4282      	cmp	r2, r0
 8000af6:	f200 80f8 	bhi.w	8000cea <__udivmoddi4+0x2be>
 8000afa:	1a84      	subs	r4, r0, r2
 8000afc:	eb65 0203 	sbc.w	r2, r5, r3
 8000b00:	2001      	movs	r0, #1
 8000b02:	4617      	mov	r7, r2
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d0e2      	beq.n	8000ace <__udivmoddi4+0xa2>
 8000b08:	e9c6 4700 	strd	r4, r7, [r6]
 8000b0c:	e7df      	b.n	8000ace <__udivmoddi4+0xa2>
 8000b0e:	b902      	cbnz	r2, 8000b12 <__udivmoddi4+0xe6>
 8000b10:	deff      	udf	#255	; 0xff
 8000b12:	fab2 f382 	clz	r3, r2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f040 8090 	bne.w	8000c3c <__udivmoddi4+0x210>
 8000b1c:	1a8a      	subs	r2, r1, r2
 8000b1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b22:	fa1f fe8c 	uxth.w	lr, ip
 8000b26:	2101      	movs	r1, #1
 8000b28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b30:	0c22      	lsrs	r2, r4, #16
 8000b32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b36:	fb0e f005 	mul.w	r0, lr, r5
 8000b3a:	4290      	cmp	r0, r2
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x124>
 8000b3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x122>
 8000b48:	4290      	cmp	r0, r2
 8000b4a:	f200 80cb 	bhi.w	8000ce4 <__udivmoddi4+0x2b8>
 8000b4e:	4645      	mov	r5, r8
 8000b50:	1a12      	subs	r2, r2, r0
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b58:	fb07 2210 	mls	r2, r7, r0, r2
 8000b5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b60:	fb0e fe00 	mul.w	lr, lr, r0
 8000b64:	45a6      	cmp	lr, r4
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0x14e>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b70:	d202      	bcs.n	8000b78 <__udivmoddi4+0x14c>
 8000b72:	45a6      	cmp	lr, r4
 8000b74:	f200 80bb 	bhi.w	8000cee <__udivmoddi4+0x2c2>
 8000b78:	4610      	mov	r0, r2
 8000b7a:	eba4 040e 	sub.w	r4, r4, lr
 8000b7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b82:	e79f      	b.n	8000ac4 <__udivmoddi4+0x98>
 8000b84:	f1c1 0720 	rsb	r7, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b92:	fa05 f401 	lsl.w	r4, r5, r1
 8000b96:	fa20 f307 	lsr.w	r3, r0, r7
 8000b9a:	40fd      	lsrs	r5, r7
 8000b9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba0:	4323      	orrs	r3, r4
 8000ba2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ba6:	fa1f fe8c 	uxth.w	lr, ip
 8000baa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bae:	0c1c      	lsrs	r4, r3, #16
 8000bb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bb8:	42a5      	cmp	r5, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000bc2:	d90b      	bls.n	8000bdc <__udivmoddi4+0x1b0>
 8000bc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bcc:	f080 8088 	bcs.w	8000ce0 <__udivmoddi4+0x2b4>
 8000bd0:	42a5      	cmp	r5, r4
 8000bd2:	f240 8085 	bls.w	8000ce0 <__udivmoddi4+0x2b4>
 8000bd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bda:	4464      	add	r4, ip
 8000bdc:	1b64      	subs	r4, r4, r5
 8000bde:	b29d      	uxth	r5, r3
 8000be0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000be4:	fb09 4413 	mls	r4, r9, r3, r4
 8000be8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bf0:	45a6      	cmp	lr, r4
 8000bf2:	d908      	bls.n	8000c06 <__udivmoddi4+0x1da>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bfc:	d26c      	bcs.n	8000cd8 <__udivmoddi4+0x2ac>
 8000bfe:	45a6      	cmp	lr, r4
 8000c00:	d96a      	bls.n	8000cd8 <__udivmoddi4+0x2ac>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	4464      	add	r4, ip
 8000c06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c0e:	eba4 040e 	sub.w	r4, r4, lr
 8000c12:	42ac      	cmp	r4, r5
 8000c14:	46c8      	mov	r8, r9
 8000c16:	46ae      	mov	lr, r5
 8000c18:	d356      	bcc.n	8000cc8 <__udivmoddi4+0x29c>
 8000c1a:	d053      	beq.n	8000cc4 <__udivmoddi4+0x298>
 8000c1c:	b156      	cbz	r6, 8000c34 <__udivmoddi4+0x208>
 8000c1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c22:	eb64 040e 	sbc.w	r4, r4, lr
 8000c26:	fa04 f707 	lsl.w	r7, r4, r7
 8000c2a:	40ca      	lsrs	r2, r1
 8000c2c:	40cc      	lsrs	r4, r1
 8000c2e:	4317      	orrs	r7, r2
 8000c30:	e9c6 7400 	strd	r7, r4, [r6]
 8000c34:	4618      	mov	r0, r3
 8000c36:	2100      	movs	r1, #0
 8000c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3c:	f1c3 0120 	rsb	r1, r3, #32
 8000c40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c44:	fa20 f201 	lsr.w	r2, r0, r1
 8000c48:	fa25 f101 	lsr.w	r1, r5, r1
 8000c4c:	409d      	lsls	r5, r3
 8000c4e:	432a      	orrs	r2, r5
 8000c50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c60:	0c11      	lsrs	r1, r2, #16
 8000c62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c66:	fb00 f50e 	mul.w	r5, r0, lr
 8000c6a:	428d      	cmp	r5, r1
 8000c6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x258>
 8000c72:	eb1c 0101 	adds.w	r1, ip, r1
 8000c76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c7a:	d22f      	bcs.n	8000cdc <__udivmoddi4+0x2b0>
 8000c7c:	428d      	cmp	r5, r1
 8000c7e:	d92d      	bls.n	8000cdc <__udivmoddi4+0x2b0>
 8000c80:	3802      	subs	r0, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1b49      	subs	r1, r1, r5
 8000c86:	b292      	uxth	r2, r2
 8000c88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000c90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c94:	fb05 f10e 	mul.w	r1, r5, lr
 8000c98:	4291      	cmp	r1, r2
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x282>
 8000c9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca4:	d216      	bcs.n	8000cd4 <__udivmoddi4+0x2a8>
 8000ca6:	4291      	cmp	r1, r2
 8000ca8:	d914      	bls.n	8000cd4 <__udivmoddi4+0x2a8>
 8000caa:	3d02      	subs	r5, #2
 8000cac:	4462      	add	r2, ip
 8000cae:	1a52      	subs	r2, r2, r1
 8000cb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cb4:	e738      	b.n	8000b28 <__udivmoddi4+0xfc>
 8000cb6:	4631      	mov	r1, r6
 8000cb8:	4630      	mov	r0, r6
 8000cba:	e708      	b.n	8000ace <__udivmoddi4+0xa2>
 8000cbc:	4639      	mov	r1, r7
 8000cbe:	e6e6      	b.n	8000a8e <__udivmoddi4+0x62>
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	e6fb      	b.n	8000abc <__udivmoddi4+0x90>
 8000cc4:	4548      	cmp	r0, r9
 8000cc6:	d2a9      	bcs.n	8000c1c <__udivmoddi4+0x1f0>
 8000cc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ccc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	e7a3      	b.n	8000c1c <__udivmoddi4+0x1f0>
 8000cd4:	4645      	mov	r5, r8
 8000cd6:	e7ea      	b.n	8000cae <__udivmoddi4+0x282>
 8000cd8:	462b      	mov	r3, r5
 8000cda:	e794      	b.n	8000c06 <__udivmoddi4+0x1da>
 8000cdc:	4640      	mov	r0, r8
 8000cde:	e7d1      	b.n	8000c84 <__udivmoddi4+0x258>
 8000ce0:	46d0      	mov	r8, sl
 8000ce2:	e77b      	b.n	8000bdc <__udivmoddi4+0x1b0>
 8000ce4:	3d02      	subs	r5, #2
 8000ce6:	4462      	add	r2, ip
 8000ce8:	e732      	b.n	8000b50 <__udivmoddi4+0x124>
 8000cea:	4608      	mov	r0, r1
 8000cec:	e70a      	b.n	8000b04 <__udivmoddi4+0xd8>
 8000cee:	4464      	add	r4, ip
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	e742      	b.n	8000b7a <__udivmoddi4+0x14e>

08000cf4 <__aeabi_idiv0>:
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <adc_read>:
 * If any of the steps fail, it returns -1 to indicate an error.
 *
 * @return The digital value read from the ADC, or -1 if an error occurred.
 */
int adc_read(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
    int adc_value = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]

    if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000d02:	4813      	ldr	r0, [pc, #76]	; (8000d50 <adc_read+0x58>)
 8000d04:	f001 faa8 	bl	8002258 <HAL_ADC_Start>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <adc_read+0x1c>
    {
        return -1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e019      	b.n	8000d48 <adc_read+0x50>
    }

    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <adc_read+0x58>)
 8000d1a:	f001 fb33 	bl	8002384 <HAL_ADC_PollForConversion>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <adc_read+0x32>
    {
        return -1;
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
 8000d28:	e00e      	b.n	8000d48 <adc_read+0x50>
    }

    // Read ADC value
    adc_value = HAL_ADC_GetValue(&hadc1);
 8000d2a:	4809      	ldr	r0, [pc, #36]	; (8000d50 <adc_read+0x58>)
 8000d2c:	f001 fbb9 	bl	80024a2 <HAL_ADC_GetValue>
 8000d30:	4603      	mov	r3, r0
 8000d32:	607b      	str	r3, [r7, #4]

    if (HAL_ADC_Stop(&hadc1) != HAL_OK)
 8000d34:	4806      	ldr	r0, [pc, #24]	; (8000d50 <adc_read+0x58>)
 8000d36:	f001 faf2 	bl	800231e <HAL_ADC_Stop>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <adc_read+0x4e>
    {

        return -1;
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	e000      	b.n	8000d48 <adc_read+0x50>
    }

    return adc_value;
 8000d46:	687b      	ldr	r3, [r7, #4]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000034 	.word	0x20000034

08000d54 <int_to_string>:
 *
 * @param num The integer value to be converted.
 * @param str The buffer where the converted string will be stored. It should be large enough to hold the resulting string.
 */
void int_to_string(int num, char* str)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
    // Handle negative numbers
    if (num < 0)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	da07      	bge.n	8000d74 <int_to_string+0x20>
    {
        *str++ = '-';
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	603a      	str	r2, [r7, #0]
 8000d6a:	222d      	movs	r2, #45	; 0x2d
 8000d6c:	701a      	strb	r2, [r3, #0]
        num *= -1;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	425b      	negs	r3, r3
 8000d72:	607b      	str	r3, [r7, #4]
    }

    // Convert each digit to a character and store it in the string
    int temp = num;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	60fb      	str	r3, [r7, #12]
    int length = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
    do {
        ++length;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
        temp /= 10;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <int_to_string+0xa0>)
 8000d86:	fb82 1203 	smull	r1, r2, r2, r3
 8000d8a:	1092      	asrs	r2, r2, #2
 8000d8c:	17db      	asrs	r3, r3, #31
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	60fb      	str	r3, [r7, #12]
    } while (temp);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f1      	bne.n	8000d7c <int_to_string+0x28>


    str[length] = '\0';
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]

    while (num)
 8000da2:	e01d      	b.n	8000de0 <int_to_string+0x8c>
    {
        str[--length] = '0' + (num % 10); // Convert digit to character
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <int_to_string+0xa0>)
 8000da8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dac:	1099      	asrs	r1, r3, #2
 8000dae:	17d3      	asrs	r3, r2, #31
 8000db0:	1ac9      	subs	r1, r1, r3
 8000db2:	460b      	mov	r3, r1
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	440b      	add	r3, r1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	1ad1      	subs	r1, r2, r3
 8000dbc:	b2ca      	uxtb	r2, r1
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	6839      	ldr	r1, [r7, #0]
 8000dc8:	440b      	add	r3, r1
 8000dca:	3230      	adds	r2, #48	; 0x30
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	701a      	strb	r2, [r3, #0]
        num /= 10; // Move to the next digit
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <int_to_string+0xa0>)
 8000dd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd8:	1092      	asrs	r2, r2, #2
 8000dda:	17db      	asrs	r3, r3, #31
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	607b      	str	r3, [r7, #4]
    while (num)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1de      	bne.n	8000da4 <int_to_string+0x50>
    }
}
 8000de6:	bf00      	nop
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	66666667 	.word	0x66666667

08000df8 <PotControl>:
  * @param  None
  * @return None
  */

void PotControl(void)
{
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	b0a2      	sub	sp, #136	; 0x88
 8000dfc:	af00      	add	r7, sp, #0
    char str[20];

    adc_value = adc_read() / 16;
 8000dfe:	f7ff ff7b 	bl	8000cf8 <adc_read>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	da00      	bge.n	8000e0a <PotControl+0x12>
 8000e08:	330f      	adds	r3, #15
 8000e0a:	111b      	asrs	r3, r3, #4
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b30      	ldr	r3, [pc, #192]	; (8000ed0 <PotControl+0xd8>)
 8000e10:	601a      	str	r2, [r3, #0]

    if (adc_value > 0 && adc_value < 255)
 8000e12:	4b2f      	ldr	r3, [pc, #188]	; (8000ed0 <PotControl+0xd8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	dd43      	ble.n	8000ea2 <PotControl+0xaa>
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <PotControl+0xd8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2bfe      	cmp	r3, #254	; 0xfe
 8000e20:	dc3f      	bgt.n	8000ea2 <PotControl+0xaa>
    {
        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, adc_value);
 8000e22:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <PotControl+0xd8>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <PotControl+0xdc>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	63da      	str	r2, [r3, #60]	; 0x3c

        adc_value = adc_value / 2.55;
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <PotControl+0xd8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fb1f 	bl	8000474 <__aeabi_i2d>
 8000e36:	a324      	add	r3, pc, #144	; (adr r3, 8000ec8 <PotControl+0xd0>)
 8000e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3c:	f7ff fcae 	bl	800079c <__aeabi_ddiv>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f7ff fd90 	bl	800096c <__aeabi_d2iz>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4a20      	ldr	r2, [pc, #128]	; (8000ed0 <PotControl+0xd8>)
 8000e50:	6013      	str	r3, [r2, #0]
        int_to_string(adc_value, str);
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <PotControl+0xd8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff79 	bl	8000d54 <int_to_string>

        uint8_t msg1[] = "Potentiometer is set to %";
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <PotControl+0xe0>)
 8000e64:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000e68:	461d      	mov	r5, r3
 8000e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e72:	c403      	stmia	r4!, {r0, r1}
 8000e74:	8022      	strh	r2, [r4, #0]
        HAL_UART_Transmit(&huart2, msg1, sizeof(msg1) - 1, HAL_MAX_DELAY);
 8000e76:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	2219      	movs	r2, #25
 8000e80:	4816      	ldr	r0, [pc, #88]	; (8000edc <PotControl+0xe4>)
 8000e82:	f004 fe90 	bl	8005ba6 <HAL_UART_Transmit>

        transmit_string(&huart2, str);
 8000e86:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4813      	ldr	r0, [pc, #76]	; (8000edc <PotControl+0xe4>)
 8000e8e:	f000 fdd4 	bl	8001a3a <transmit_string>

        HAL_UART_Transmit(&huart2, nextline, sizeof(nextline) - 1, HAL_MAX_DELAY);
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	2201      	movs	r2, #1
 8000e98:	4911      	ldr	r1, [pc, #68]	; (8000ee0 <PotControl+0xe8>)
 8000e9a:	4810      	ldr	r0, [pc, #64]	; (8000edc <PotControl+0xe4>)
 8000e9c:	f004 fe83 	bl	8005ba6 <HAL_UART_Transmit>
    {
 8000ea0:	e00e      	b.n	8000ec0 <PotControl+0xc8>
    }
    else
    {
        uint8_t msg[] = "Readings are out of bounds! Please move the potentiometer to the readable zone.\n";
 8000ea2:	4a10      	ldr	r2, [pc, #64]	; (8000ee4 <PotControl+0xec>)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	2251      	movs	r2, #81	; 0x51
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f005 fc3c 	bl	8006728 <memcpy>
        HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 8000eb0:	1d39      	adds	r1, r7, #4
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	2250      	movs	r2, #80	; 0x50
 8000eb8:	4808      	ldr	r0, [pc, #32]	; (8000edc <PotControl+0xe4>)
 8000eba:	f004 fe74 	bl	8005ba6 <HAL_UART_Transmit>
    }
}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3788      	adds	r7, #136	; 0x88
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec8:	66666666 	.word	0x66666666
 8000ecc:	40046666 	.word	0x40046666
 8000ed0:	200001c0 	.word	0x200001c0
 8000ed4:	20000098 	.word	0x20000098
 8000ed8:	0800675c 	.word	0x0800675c
 8000edc:	20000130 	.word	0x20000130
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	08006778 	.word	0x08006778

08000ee8 <TerminalControl>:
  * @brief  Reads the terminal input and stores it in a variable. Resets the timer
  * @param  None
  * @return None
  */
void TerminalControl(void)
{
 8000ee8:	b5b0      	push	{r4, r5, r7, lr}
 8000eea:	b08e      	sub	sp, #56	; 0x38
 8000eec:	af00      	add	r7, sp, #0
    percentage = read_data(&huart2);
 8000eee:	4814      	ldr	r0, [pc, #80]	; (8000f40 <TerminalControl+0x58>)
 8000ef0:	f000 fd3e 	bl	8001970 <read_data>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <TerminalControl+0x5c>)
 8000ef8:	6013      	str	r3, [r2, #0]

    uint8_t msg5[] = "Input received. Fan speed will be set in 5 seconds.\n";
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <TerminalControl+0x60>)
 8000efc:	463c      	mov	r4, r7
 8000efe:	461d      	mov	r5, r3
 8000f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f10:	6020      	str	r0, [r4, #0]
 8000f12:	3404      	adds	r4, #4
 8000f14:	7021      	strb	r1, [r4, #0]
    HAL_UART_Transmit(&huart2, msg5, sizeof(msg5) - 1, HAL_MAX_DELAY);
 8000f16:	4639      	mov	r1, r7
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1c:	2234      	movs	r2, #52	; 0x34
 8000f1e:	4808      	ldr	r0, [pc, #32]	; (8000f40 <TerminalControl+0x58>)
 8000f20:	f004 fe41 	bl	8005ba6 <HAL_UART_Transmit>

    __HAL_TIM_SET_COUNTER(&htim16, 0);
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <TerminalControl+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24

    dataReceivedBool = 1;
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <TerminalControl+0x68>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]

    counter = 0;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <TerminalControl+0x6c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3738      	adds	r7, #56	; 0x38
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f40:	20000130 	.word	0x20000130
 8000f44:	200001c4 	.word	0x200001c4
 8000f48:	080067cc 	.word	0x080067cc
 8000f4c:	200000e4 	.word	0x200000e4
 8000f50:	200001c8 	.word	0x200001c8
 8000f54:	200001b8 	.word	0x200001b8

08000f58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode. Time depended operations happen here
  * @param  htim: TIM handle
  * @return None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b098      	sub	sp, #96	; 0x60
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    if(htim == &htim16)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a43      	ldr	r2, [pc, #268]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d110      	bne.n	8000f8a <HAL_TIM_PeriodElapsedCallback+0x32>
    {
        HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_12);
 8000f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f002 fabc 	bl	80034ec <HAL_GPIO_TogglePin>

        if (methodChosen == 2)
 8000f74:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d101      	bne.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0x28>
        {
            PotControl();
 8000f7c:	f7ff ff3c 	bl	8000df8 <PotControl>
        }

        counter++;
 8000f80:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	4a3c      	ldr	r2, [pc, #240]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f88:	6013      	str	r3, [r2, #0]
    }

    if(counter == 5)
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	d163      	bne.n	800105a <HAL_TIM_PeriodElapsedCallback+0x102>
    {
        if (methodChosen == 1 && dataReceivedBool == 1)
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d15f      	bne.n	800105a <HAL_TIM_PeriodElapsedCallback+0x102>
 8000f9a:	4b38      	ldr	r3, [pc, #224]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d15b      	bne.n	800105a <HAL_TIM_PeriodElapsedCallback+0x102>
        {
            char str[20];

            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, percentage * 2.55);
 8000fa2:	4b37      	ldr	r3, [pc, #220]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa64 	bl	8000474 <__aeabi_i2d>
 8000fac:	a32e      	add	r3, pc, #184	; (adr r3, 8001068 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff fac9 	bl	8000548 <__aeabi_dmul>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4932      	ldr	r1, [pc, #200]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000fbc:	680c      	ldr	r4, [r1, #0]
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f7ff fcfb 	bl	80009bc <__aeabi_d2uiz>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	63e3      	str	r3, [r4, #60]	; 0x3c

            uint8_t msg3[] = "Fan speed has been set to %";
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000fcc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000fd0:	461d      	mov	r5, r3
 8000fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            HAL_UART_Transmit(&huart2, msg3, sizeof(msg3) - 1, HAL_MAX_DELAY);
 8000fde:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	221b      	movs	r2, #27
 8000fe8:	4828      	ldr	r0, [pc, #160]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000fea:	f004 fddc 	bl	8005ba6 <HAL_UART_Transmit>

            int_to_string(percentage, str);
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff feab 	bl	8000d54 <int_to_string>
            transmit_string(&huart2, str);
 8000ffe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001002:	4619      	mov	r1, r3
 8001004:	4821      	ldr	r0, [pc, #132]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001006:	f000 fd18 	bl	8001a3a <transmit_string>

            HAL_UART_Transmit(&huart2, nextline, sizeof(nextline) - 1, HAL_MAX_DELAY);
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	2201      	movs	r2, #1
 8001010:	491f      	ldr	r1, [pc, #124]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001012:	481e      	ldr	r0, [pc, #120]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001014:	f004 fdc7 	bl	8005ba6 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, nextline, sizeof(nextline) - 1, HAL_MAX_DELAY);
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	2201      	movs	r2, #1
 800101e:	491c      	ldr	r1, [pc, #112]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001020:	481a      	ldr	r0, [pc, #104]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001022:	f004 fdc0 	bl	8005ba6 <HAL_UART_Transmit>

            dataReceivedBool = 0;
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

            uint8_t msg4[] = "Please enter the desired fan speed (%)\n";
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800102e:	f107 0408 	add.w	r4, r7, #8
 8001032:	461d      	mov	r5, r3
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001040:	e884 0003 	stmia.w	r4, {r0, r1}
            HAL_UART_Transmit(&huart2, msg4, sizeof(msg4) - 1, HAL_MAX_DELAY);
 8001044:	f107 0108 	add.w	r1, r7, #8
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	2227      	movs	r2, #39	; 0x27
 800104e:	480f      	ldr	r0, [pc, #60]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001050:	f004 fda9 	bl	8005ba6 <HAL_UART_Transmit>

            counter = 0;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
        }
    }
}
 800105a:	bf00      	nop
 800105c:	3760      	adds	r7, #96	; 0x60
 800105e:	46bd      	mov	sp, r7
 8001060:	bdb0      	pop	{r4, r5, r7, pc}
 8001062:	bf00      	nop
 8001064:	f3af 8000 	nop.w
 8001068:	66666666 	.word	0x66666666
 800106c:	40046666 	.word	0x40046666
 8001070:	200000e4 	.word	0x200000e4
 8001074:	200001bc 	.word	0x200001bc
 8001078:	200001b8 	.word	0x200001b8
 800107c:	200001c8 	.word	0x200001c8
 8001080:	200001c4 	.word	0x200001c4
 8001084:	20000098 	.word	0x20000098
 8001088:	08006804 	.word	0x08006804
 800108c:	20000130 	.word	0x20000130
 8001090:	20000008 	.word	0x20000008
 8001094:	08006820 	.word	0x08006820

08001098 <ProgramLoop>:
  * @brief  Main program loop
  * @param  None
  * @return None
  */
void ProgramLoop(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b096      	sub	sp, #88	; 0x58
 800109c:	af00      	add	r7, sp, #0
    if (methodChosen == 0)
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <ProgramLoop+0xb4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d114      	bne.n	80010d0 <ProgramLoop+0x38>
    {
        uint8_t msg[] = "Please Enter 1 for fan control via terminal or 2 for fan control via potentiometer:\n";
 80010a6:	4a2a      	ldr	r2, [pc, #168]	; (8001150 <ProgramLoop+0xb8>)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4611      	mov	r1, r2
 80010ac:	2255      	movs	r2, #85	; 0x55
 80010ae:	4618      	mov	r0, r3
 80010b0:	f005 fb3a 	bl	8006728 <memcpy>
        HAL_UART_Transmit(&huart2, msg, sizeof(msg) - 1, HAL_MAX_DELAY);
 80010b4:	4639      	mov	r1, r7
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	2254      	movs	r2, #84	; 0x54
 80010bc:	4825      	ldr	r0, [pc, #148]	; (8001154 <ProgramLoop+0xbc>)
 80010be:	f004 fd72 	bl	8005ba6 <HAL_UART_Transmit>

        methodChosen = read_data(&huart2);
 80010c2:	4824      	ldr	r0, [pc, #144]	; (8001154 <ProgramLoop+0xbc>)
 80010c4:	f000 fc54 	bl	8001970 <read_data>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <ProgramLoop+0xb4>)
 80010cc:	6013      	str	r3, [r2, #0]
    }
    else
    {
        methodChosen = 0;
    }
}
 80010ce:	e038      	b.n	8001142 <ProgramLoop+0xaa>
    else if (methodChosen == 1)
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <ProgramLoop+0xb4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d117      	bne.n	8001108 <ProgramLoop+0x70>
        if (method1Bool == 1)
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <ProgramLoop+0xc0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d110      	bne.n	8001102 <ProgramLoop+0x6a>
            uint8_t msg4[] = "You have chosen the terminal control! Please enter the desired fan speed (%)\n";
 80010e0:	4a1e      	ldr	r2, [pc, #120]	; (800115c <ProgramLoop+0xc4>)
 80010e2:	463b      	mov	r3, r7
 80010e4:	4611      	mov	r1, r2
 80010e6:	224e      	movs	r2, #78	; 0x4e
 80010e8:	4618      	mov	r0, r3
 80010ea:	f005 fb1d 	bl	8006728 <memcpy>
            HAL_UART_Transmit(&huart2, msg4, sizeof(msg4) - 1, HAL_MAX_DELAY);
 80010ee:	4639      	mov	r1, r7
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	224d      	movs	r2, #77	; 0x4d
 80010f6:	4817      	ldr	r0, [pc, #92]	; (8001154 <ProgramLoop+0xbc>)
 80010f8:	f004 fd55 	bl	8005ba6 <HAL_UART_Transmit>
            method1Bool = 0;
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <ProgramLoop+0xc0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
        TerminalControl();
 8001102:	f7ff fef1 	bl	8000ee8 <TerminalControl>
}
 8001106:	e01c      	b.n	8001142 <ProgramLoop+0xaa>
    else if (methodChosen == 2)
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <ProgramLoop+0xb4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d115      	bne.n	800113c <ProgramLoop+0xa4>
        if (method2Bool == 1)
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <ProgramLoop+0xc8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d114      	bne.n	8001142 <ProgramLoop+0xaa>
            uint8_t msg4[] = "You have chosen the terminal control! Please enter the desired fan speed (%)\n";
 8001118:	4a10      	ldr	r2, [pc, #64]	; (800115c <ProgramLoop+0xc4>)
 800111a:	463b      	mov	r3, r7
 800111c:	4611      	mov	r1, r2
 800111e:	224e      	movs	r2, #78	; 0x4e
 8001120:	4618      	mov	r0, r3
 8001122:	f005 fb01 	bl	8006728 <memcpy>
            HAL_UART_Transmit(&huart2, msg4, sizeof(msg4) - 1, HAL_MAX_DELAY);
 8001126:	4639      	mov	r1, r7
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	224d      	movs	r2, #77	; 0x4d
 800112e:	4809      	ldr	r0, [pc, #36]	; (8001154 <ProgramLoop+0xbc>)
 8001130:	f004 fd39 	bl	8005ba6 <HAL_UART_Transmit>
            method2Bool = 0;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <ProgramLoop+0xc8>)
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
}
 800113a:	e002      	b.n	8001142 <ProgramLoop+0xaa>
        methodChosen = 0;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <ProgramLoop+0xb4>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
}
 8001142:	bf00      	nop
 8001144:	3758      	adds	r7, #88	; 0x58
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001bc 	.word	0x200001bc
 8001150:	08006848 	.word	0x08006848
 8001154:	20000130 	.word	0x20000130
 8001158:	20000000 	.word	0x20000000
 800115c:	080068a0 	.word	0x080068a0
 8001160:	20000004 	.word	0x20000004

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 fca9 	bl	8001abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f818 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 f9e0 	bl	8001534 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001174:	f000 f9ae 	bl	80014d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001178:	f000 f8d8 	bl	800132c <MX_TIM1_Init>
  MX_TIM16_Init();
 800117c:	f000 f982 	bl	8001484 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001180:	f000 f870 	bl	8001264 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <main+0x34>)
 8001186:	f003 fbc7 	bl	8004918 <HAL_TIM_Base_Start_IT>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800118a:	2108      	movs	r1, #8
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <main+0x38>)
 800118e:	f004 fafd 	bl	800578c <HAL_TIMEx_PWMN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	ProgramLoop();
 8001192:	f7ff ff81 	bl	8001098 <ProgramLoop>
 8001196:	e7fc      	b.n	8001192 <main+0x2e>
 8001198:	200000e4 	.word	0x200000e4
 800119c:	20000098 	.word	0x20000098

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b096      	sub	sp, #88	; 0x58
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2244      	movs	r2, #68	; 0x44
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 fa8d 	bl	80066ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	463b      	mov	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011c6:	f002 f9c9 	bl	800355c <HAL_PWREx_ControlVoltageScaling>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011d0:	f000 fa12 	bl	80015f8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011d4:	f002 f9a4 	bl	8003520 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <SystemClock_Config+0xc0>)
 80011da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011de:	4a20      	ldr	r2, [pc, #128]	; (8001260 <SystemClock_Config+0xc0>)
 80011e0:	f023 0318 	bic.w	r3, r3, #24
 80011e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80011e8:	2314      	movs	r3, #20
 80011ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011f8:	2360      	movs	r3, #96	; 0x60
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fc:	2302      	movs	r3, #2
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001200:	2301      	movs	r3, #1
 8001202:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001204:	2301      	movs	r3, #1
 8001206:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001208:	2310      	movs	r3, #16
 800120a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800120c:	2307      	movs	r3, #7
 800120e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001210:	2302      	movs	r3, #2
 8001212:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001214:	2302      	movs	r3, #2
 8001216:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4618      	mov	r0, r3
 800121e:	f002 f9f3 	bl	8003608 <HAL_RCC_OscConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001228:	f000 f9e6 	bl	80015f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122c:	230f      	movs	r3, #15
 800122e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001230:	2303      	movs	r3, #3
 8001232:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	2101      	movs	r1, #1
 8001244:	4618      	mov	r0, r3
 8001246:	f002 fdf3 	bl	8003e30 <HAL_RCC_ClockConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001250:	f000 f9d2 	bl	80015f8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001254:	f003 fa06 	bl	8004664 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001258:	bf00      	nop
 800125a:	3758      	adds	r7, #88	; 0x58
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000

08001264 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <MX_ADC1_Init+0xbc>)
 800127c:	4a29      	ldr	r2, [pc, #164]	; (8001324 <MX_ADC1_Init+0xc0>)
 800127e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <MX_ADC1_Init+0xbc>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001286:	4b26      	ldr	r3, [pc, #152]	; (8001320 <MX_ADC1_Init+0xbc>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <MX_ADC1_Init+0xbc>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <MX_ADC1_Init+0xbc>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <MX_ADC1_Init+0xbc>)
 800129a:	2204      	movs	r2, #4
 800129c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <MX_ADC1_Init+0xbc>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <MX_ADC1_Init+0xbc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <MX_ADC1_Init+0xbc>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_ADC1_Init+0xbc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <MX_ADC1_Init+0xbc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_ADC1_Init+0xbc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <MX_ADC1_Init+0xbc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_ADC1_Init+0xbc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <MX_ADC1_Init+0xbc>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012da:	4811      	ldr	r0, [pc, #68]	; (8001320 <MX_ADC1_Init+0xbc>)
 80012dc:	f000 fe7a 	bl	8001fd4 <HAL_ADC_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80012e6:	f000 f987 	bl	80015f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_ADC1_Init+0xc4>)
 80012ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ee:	2306      	movs	r3, #6
 80012f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012f6:	237f      	movs	r3, #127	; 0x7f
 80012f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012fa:	2304      	movs	r3, #4
 80012fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_ADC1_Init+0xbc>)
 8001308:	f001 f8d8 	bl	80024bc <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001312:	f000 f971 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000034 	.word	0x20000034
 8001324:	50040000 	.word	0x50040000
 8001328:	14f00020 	.word	0x14f00020

0800132c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b09a      	sub	sp, #104	; 0x68
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	222c      	movs	r2, #44	; 0x2c
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f005 f9b1 	bl	80066ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800136c:	4b43      	ldr	r3, [pc, #268]	; (800147c <MX_TIM1_Init+0x150>)
 800136e:	4a44      	ldr	r2, [pc, #272]	; (8001480 <MX_TIM1_Init+0x154>)
 8001370:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001372:	4b42      	ldr	r3, [pc, #264]	; (800147c <MX_TIM1_Init+0x150>)
 8001374:	2200      	movs	r2, #0
 8001376:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b40      	ldr	r3, [pc, #256]	; (800147c <MX_TIM1_Init+0x150>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800137e:	4b3f      	ldr	r3, [pc, #252]	; (800147c <MX_TIM1_Init+0x150>)
 8001380:	22ff      	movs	r2, #255	; 0xff
 8001382:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001384:	4b3d      	ldr	r3, [pc, #244]	; (800147c <MX_TIM1_Init+0x150>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800138a:	4b3c      	ldr	r3, [pc, #240]	; (800147c <MX_TIM1_Init+0x150>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b3a      	ldr	r3, [pc, #232]	; (800147c <MX_TIM1_Init+0x150>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001396:	4839      	ldr	r0, [pc, #228]	; (800147c <MX_TIM1_Init+0x150>)
 8001398:	f003 fa66 	bl	8004868 <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013a2:	f000 f929 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013b0:	4619      	mov	r1, r3
 80013b2:	4832      	ldr	r0, [pc, #200]	; (800147c <MX_TIM1_Init+0x150>)
 80013b4:	f003 fd7c 	bl	8004eb0 <HAL_TIM_ConfigClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013be:	f000 f91b 	bl	80015f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013c2:	482e      	ldr	r0, [pc, #184]	; (800147c <MX_TIM1_Init+0x150>)
 80013c4:	f003 fafc 	bl	80049c0 <HAL_TIM_PWM_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013ce:	f000 f913 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013e2:	4619      	mov	r1, r3
 80013e4:	4825      	ldr	r0, [pc, #148]	; (800147c <MX_TIM1_Init+0x150>)
 80013e6:	f004 fa6f 	bl	80058c8 <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80013f0:	f000 f902 	bl	80015f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f4:	2360      	movs	r3, #96	; 0x60
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fc:	2300      	movs	r3, #0
 80013fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001400:	2300      	movs	r3, #0
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001410:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001414:	2208      	movs	r2, #8
 8001416:	4619      	mov	r1, r3
 8001418:	4818      	ldr	r0, [pc, #96]	; (800147c <MX_TIM1_Init+0x150>)
 800141a:	f003 fc35 	bl	8004c88 <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001424:	f000 f8e8 	bl	80015f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800143c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001440:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800144a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4619      	mov	r1, r3
 800145c:	4807      	ldr	r0, [pc, #28]	; (800147c <MX_TIM1_Init+0x150>)
 800145e:	f004 fa99 	bl	8005994 <HAL_TIMEx_ConfigBreakDeadTime>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001468:	f000 f8c6 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <MX_TIM1_Init+0x150>)
 800146e:	f000 f993 	bl	8001798 <HAL_TIM_MspPostInit>

}
 8001472:	bf00      	nop
 8001474:	3768      	adds	r7, #104	; 0x68
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000098 	.word	0x20000098
 8001480:	40012c00 	.word	0x40012c00

08001484 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_TIM16_Init+0x48>)
 800148a:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <MX_TIM16_Init+0x4c>)
 800148c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000-1;
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_TIM16_Init+0x48>)
 8001490:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001494:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <MX_TIM16_Init+0x48>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000-1;
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_TIM16_Init+0x48>)
 800149e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80014a2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_TIM16_Init+0x48>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_TIM16_Init+0x48>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_TIM16_Init+0x48>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_TIM16_Init+0x48>)
 80014b8:	f003 f9d6 	bl	8004868 <HAL_TIM_Base_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80014c2:	f000 f899 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000e4 	.word	0x200000e4
 80014d0:	40014400 	.word	0x40014400

080014d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_USART2_UART_Init+0x58>)
 80014da:	4a15      	ldr	r2, [pc, #84]	; (8001530 <MX_USART2_UART_Init+0x5c>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_USART2_UART_Init+0x58>)
 80014e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_USART2_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_USART2_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_USART2_UART_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_USART2_UART_Init+0x58>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_USART2_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_USART2_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_USART2_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_USART2_UART_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USART2_UART_Init+0x58>)
 8001518:	f004 faf7 	bl	8005b0a <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001522:	f000 f869 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000130 	.word	0x20000130
 8001530:	40004400 	.word	0x40004400

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <MX_GPIO_Init+0xbc>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <MX_GPIO_Init+0xbc>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <MX_GPIO_Init+0xbc>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_GPIO_Init+0xbc>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a22      	ldr	r2, [pc, #136]	; (80015f0 <MX_GPIO_Init+0xbc>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_GPIO_Init+0xbc>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_GPIO_Init+0xbc>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <MX_GPIO_Init+0xbc>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_GPIO_Init+0xbc>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f001 ff8e 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2108      	movs	r1, #8
 80015a4:	4813      	ldr	r0, [pc, #76]	; (80015f4 <MX_GPIO_Init+0xc0>)
 80015a6:	f001 ff89 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	4619      	mov	r1, r3
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c6:	f001 fe0f 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80015ca:	2308      	movs	r3, #8
 80015cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	4619      	mov	r1, r3
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <MX_GPIO_Init+0xc0>)
 80015e2:	f001 fe01 	bl	80031e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e6:	bf00      	nop
 80015e8:	3720      	adds	r7, #32
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000400 	.word	0x48000400

080015f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001600:	e7fe      	b.n	8001600 <Error_Handler+0x8>
	...

08001604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_MspInit+0x44>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160e:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <HAL_MspInit+0x44>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6613      	str	r3, [r2, #96]	; 0x60
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_MspInit+0x44>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_MspInit+0x44>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_MspInit+0x44>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6593      	str	r3, [r2, #88]	; 0x58
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_MspInit+0x44>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b09e      	sub	sp, #120	; 0x78
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	2254      	movs	r2, #84	; 0x54
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f005 f82e 	bl	80066ce <memset>
  if(hadc->Instance==ADC1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a25      	ldr	r2, [pc, #148]	; (800170c <HAL_ADC_MspInit+0xc0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d143      	bne.n	8001704 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800167c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001680:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001682:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001686:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001688:	2301      	movs	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001690:	2310      	movs	r3, #16
 8001692:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001694:	2307      	movs	r3, #7
 8001696:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001698:	2302      	movs	r3, #2
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80016a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 fde4 	bl	8004278 <HAL_RCCEx_PeriphCLKConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80016b6:	f7ff ff9f 	bl	80015f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_ADC_MspInit+0xc4>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <HAL_ADC_MspInit+0xc4>)
 80016c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_ADC_MspInit+0xc4>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_ADC_MspInit+0xc4>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_ADC_MspInit+0xc4>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_ADC_MspInit+0xc4>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ea:	2301      	movs	r3, #1
 80016ec:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016ee:	230b      	movs	r3, #11
 80016f0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001700:	f001 fd72 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3778      	adds	r7, #120	; 0x78
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	50040000 	.word	0x50040000
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a1a      	ldr	r2, [pc, #104]	; (800178c <HAL_TIM_Base_MspInit+0x78>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d114      	bne.n	8001750 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_TIM_Base_MspInit+0x7c>)
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	4a19      	ldr	r2, [pc, #100]	; (8001790 <HAL_TIM_Base_MspInit+0x7c>)
 800172c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001730:	6613      	str	r3, [r2, #96]	; 0x60
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <HAL_TIM_Base_MspInit+0x7c>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2019      	movs	r0, #25
 8001744:	f001 fd19 	bl	800317a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001748:	2019      	movs	r0, #25
 800174a:	f001 fd32 	bl	80031b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800174e:	e018      	b.n	8001782 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_TIM_Base_MspInit+0x80>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d113      	bne.n	8001782 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_TIM_Base_MspInit+0x7c>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <HAL_TIM_Base_MspInit+0x7c>)
 8001760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001764:	6613      	str	r3, [r2, #96]	; 0x60
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_TIM_Base_MspInit+0x7c>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	2019      	movs	r0, #25
 8001778:	f001 fcff 	bl	800317a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800177c:	2019      	movs	r0, #25
 800177e:	f001 fd18 	bl	80031b2 <HAL_NVIC_EnableIRQ>
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40012c00 	.word	0x40012c00
 8001790:	40021000 	.word	0x40021000
 8001794:	40014400 	.word	0x40014400

08001798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_TIM_MspPostInit+0x64>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d11b      	bne.n	80017f2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_TIM_MspPostInit+0x68>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_TIM_MspPostInit+0x68>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_TIM_MspPostInit+0x68>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017d2:	2302      	movs	r3, #2
 80017d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <HAL_TIM_MspPostInit+0x6c>)
 80017ee:	f001 fcfb 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3720      	adds	r7, #32
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	40021000 	.word	0x40021000
 8001804:	48000400 	.word	0x48000400

08001808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b09e      	sub	sp, #120	; 0x78
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	2254      	movs	r2, #84	; 0x54
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f004 ff50 	bl	80066ce <memset>
  if(huart->Instance==USART2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a28      	ldr	r2, [pc, #160]	; (80018d4 <HAL_UART_MspInit+0xcc>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d148      	bne.n	80018ca <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001838:	2302      	movs	r3, #2
 800183a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fd17 	bl	8004278 <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001850:	f7ff fed2 	bl	80015f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001854:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_UART_MspInit+0xd0>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <HAL_UART_MspInit+0xd0>)
 800185a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185e:	6593      	str	r3, [r2, #88]	; 0x58
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_UART_MspInit+0xd0>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_UART_MspInit+0xd0>)
 800186e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001870:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <HAL_UART_MspInit+0xd0>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_UART_MspInit+0xd0>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001884:	2304      	movs	r3, #4
 8001886:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001894:	2307      	movs	r3, #7
 8001896:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f001 fca1 	bl	80031e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80018b8:	2303      	movs	r3, #3
 80018ba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018c0:	4619      	mov	r1, r3
 80018c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c6:	f001 fc8f 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3778      	adds	r7, #120	; 0x78
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40004400 	.word	0x40004400
 80018d8:	40021000 	.word	0x40021000

080018dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <NMI_Handler+0x4>

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 f91e 	bl	8001b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001934:	4803      	ldr	r0, [pc, #12]	; (8001944 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001936:	f003 f8a4 	bl	8004a82 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800193c:	f003 f8a1 	bl	8004a82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000098 	.word	0x20000098
 8001948:	200000e4 	.word	0x200000e4

0800194c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <read_data>:
 * @return int  The read data as an integer value representing the percentage.
 *              If an error occurs or the input is out of range, the function
 *              returns 0.
 */
int read_data(UART_HandleTypeDef *huart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    char buffer[4] = {0}; // Buffer to hold the input string (max 3 digits + null terminator)
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
    char c;
    int idx = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]

    // Read characters until a newline is received
    while (1) {
        HAL_UART_Receive(huart, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 8001980:	f107 010f 	add.w	r1, r7, #15
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	2201      	movs	r2, #1
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f004 f995 	bl	8005cba <HAL_UART_Receive>

        if (c == '\r' || c == '\n')
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	2b0d      	cmp	r3, #13
 8001994:	d024      	beq.n	80019e0 <read_data+0x70>
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b0a      	cmp	r3, #10
 800199a:	d021      	beq.n	80019e0 <read_data+0x70>
        {
            // Newline or carriage return detected, end of input
            break;
        }

        else if (c == '\b' && idx > 0)
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d10c      	bne.n	80019bc <read_data+0x4c>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	dd09      	ble.n	80019bc <read_data+0x4c>
        {
            // Handle backspace
            idx--;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	61fb      	str	r3, [r7, #28]
            buffer[idx] = '\0';
 80019ae:	f107 0210 	add.w	r2, r7, #16
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	4413      	add	r3, r2
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	e010      	b.n	80019de <read_data+0x6e>
        }

        else if (c >= '0' && c <= '9' && idx < 3)
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	2b2f      	cmp	r3, #47	; 0x2f
 80019c0:	d9de      	bls.n	8001980 <read_data+0x10>
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	2b39      	cmp	r3, #57	; 0x39
 80019c6:	d8db      	bhi.n	8001980 <read_data+0x10>
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	dcd8      	bgt.n	8001980 <read_data+0x10>
        {
            // Valid digit, store it in the buffer
            buffer[idx++] = c;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	61fa      	str	r2, [r7, #28]
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	3320      	adds	r3, #32
 80019d8:	443b      	add	r3, r7
 80019da:	f803 2c10 	strb.w	r2, [r3, #-16]
        HAL_UART_Receive(huart, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 80019de:	e7cf      	b.n	8001980 <read_data+0x10>
        }
    }

    // Null-terminate the input string
    buffer[idx] = '\0';
 80019e0:	f107 0210 	add.w	r2, r7, #16
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	4413      	add	r3, r2
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]

    // Convert the string to an integer
    int percentage = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
    for (int i = 0; buffer[i] != '\0'; i++) {
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	e010      	b.n	8001a18 <read_data+0xa8>
        percentage = percentage * 10 + (buffer[i] - '0');
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4619      	mov	r1, r3
 8001a02:	f107 0210 	add.w	r2, r7, #16
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	4413      	add	r3, r2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	3b30      	subs	r3, #48	; 0x30
 8001a0e:	440b      	add	r3, r1
 8001a10:	61bb      	str	r3, [r7, #24]
    for (int i = 0; buffer[i] != '\0'; i++) {
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	f107 0210 	add.w	r2, r7, #16
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1e7      	bne.n	80019f6 <read_data+0x86>
    }

    // Ensure the percentage is within 0-100
    if (percentage > 100) {
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b64      	cmp	r3, #100	; 0x64
 8001a2a:	dd01      	ble.n	8001a30 <read_data+0xc0>
        percentage = 100;
 8001a2c:	2364      	movs	r3, #100	; 0x64
 8001a2e:	61bb      	str	r3, [r7, #24]
    }

    return percentage;
 8001a30:	69bb      	ldr	r3, [r7, #24]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <transmit_string>:
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 * @param str Pointer to the null-terminated string to be transmitted.
 */
void transmit_string(UART_HandleTypeDef *huart, char *str)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
    // Loop through each character in the string
    while (*str != '\0')
 8001a44:	e009      	b.n	8001a5a <transmit_string+0x20>
    {
        // Transmit the character using HAL_UART_Transmit
        HAL_UART_Transmit(huart, (uint8_t *)str, 1, HAL_MAX_DELAY);
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	6839      	ldr	r1, [r7, #0]
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f004 f8a9 	bl	8005ba6 <HAL_UART_Transmit>

        // Move to the next character
        str++;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	603b      	str	r3, [r7, #0]
    while (*str != '\0')
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f1      	bne.n	8001a46 <transmit_string+0xc>
    }
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a70:	f7ff ff6c 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	; (8001aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <LoopForever+0xe>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	; (8001ab8 <LoopForever+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f004 fe21 	bl	80066e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a9e:	f7ff fb61 	bl	8001164 <main>

08001aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001ab0:	08006948 	.word	0x08006948
  ldr r2, =_sbss
 8001ab4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001ab8:	200001d0 	.word	0x200001d0

08001abc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_IRQHandler>

08001abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f001 fb4b 	bl	8003164 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f80e 	bl	8001af0 <HAL_InitTick>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	e001      	b.n	8001ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae0:	f7ff fd90 	bl	8001604 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_InitTick+0x6c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d023      	beq.n	8001b4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b04:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_InitTick+0x70>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_InitTick+0x6c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 fb57 	bl	80031ce <HAL_SYSTICK_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10f      	bne.n	8001b46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d809      	bhi.n	8001b40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f001 fb21 	bl	800317a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_InitTick+0x74>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e007      	b.n	8001b50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	e004      	b.n	8001b50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e001      	b.n	8001b50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000014 	.word	0x20000014
 8001b60:	2000000c 	.word	0x2000000c
 8001b64:	20000010 	.word	0x20000010

08001b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_IncTick+0x24>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000014 	.word	0x20000014
 8001b8c:	200001cc 	.word	0x200001cc

08001b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	200001cc 	.word	0x200001cc

08001ba8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	609a      	str	r2, [r3, #8]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	3360      	adds	r3, #96	; 0x60
 8001c22:	461a      	mov	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <LL_ADC_SetOffset+0x44>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c48:	bf00      	nop
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	03fff000 	.word	0x03fff000

08001c58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3360      	adds	r3, #96	; 0x60
 8001c66:	461a      	mov	r2, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b087      	sub	sp, #28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3360      	adds	r3, #96	; 0x60
 8001c94:	461a      	mov	r2, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cae:	bf00      	nop
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3330      	adds	r3, #48	; 0x30
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	4413      	add	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	211f      	movs	r1, #31
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	0e9b      	lsrs	r3, r3, #26
 8001d18:	f003 011f 	and.w	r1, r3, #31
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	431a      	orrs	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d2c:	bf00      	nop
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3314      	adds	r3, #20
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	0e5b      	lsrs	r3, r3, #25
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	4413      	add	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	0d1b      	lsrs	r3, r3, #20
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	2107      	movs	r1, #7
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	0d1b      	lsrs	r3, r3, #20
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da8:	43db      	mvns	r3, r3
 8001daa:	401a      	ands	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0318 	and.w	r3, r3, #24
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001db4:	40d9      	lsrs	r1, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	400b      	ands	r3, r1
 8001dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	0007ffff 	.word	0x0007ffff

08001dd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001de8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6093      	str	r3, [r2, #8]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e10:	d101      	bne.n	8001e16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e60:	d101      	bne.n	8001e66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e88:	f043 0201 	orr.w	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001eb0:	f043 0202 	orr.w	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <LL_ADC_IsEnabled+0x18>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <LL_ADC_IsEnabled+0x1a>
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d101      	bne.n	8001f02 <LL_ADC_IsDisableOngoing+0x18>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <LL_ADC_IsDisableOngoing+0x1a>
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f24:	f043 0204 	orr.w	r2, r3, #4
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f4c:	f043 0210 	orr.w	r2, r3, #16
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d101      	bne.n	8001f78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f9a:	f043 0220 	orr.w	r2, r3, #32
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d101      	bne.n	8001fc6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e126      	b.n	800223c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fb25 	bl	800164c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fef1 	bl	8001dfc <LL_ADC_IsDeepPowerDownEnabled>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d004      	beq.n	800202a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fed7 	bl	8001dd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff0c 	bl	8001e4c <LL_ADC_IsInternalRegulatorEnabled>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d115      	bne.n	8002066 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fef0 	bl	8001e24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002044:	4b7f      	ldr	r3, [pc, #508]	; (8002244 <HAL_ADC_Init+0x270>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	4a7f      	ldr	r2, [pc, #508]	; (8002248 <HAL_ADC_Init+0x274>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	3301      	adds	r3, #1
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002058:	e002      	b.n	8002060 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3b01      	subs	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff feee 	bl	8001e4c <LL_ADC_IsInternalRegulatorEnabled>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10d      	bne.n	8002092 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207a:	f043 0210 	orr.w	r2, r3, #16
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	f043 0201 	orr.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff ff62 	bl	8001f60 <LL_ADC_REG_IsConversionOngoing>
 800209c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 80bf 	bne.w	800222a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 80bb 	bne.w	800222a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020bc:	f043 0202 	orr.w	r2, r3, #2
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fefb 	bl	8001ec4 <LL_ADC_IsEnabled>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10b      	bne.n	80020ec <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d4:	485d      	ldr	r0, [pc, #372]	; (800224c <HAL_ADC_Init+0x278>)
 80020d6:	f7ff fef5 	bl	8001ec4 <LL_ADC_IsEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4619      	mov	r1, r3
 80020e6:	485a      	ldr	r0, [pc, #360]	; (8002250 <HAL_ADC_Init+0x27c>)
 80020e8:	f7ff fd5e 	bl	8001ba8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	7e5b      	ldrb	r3, [r3, #25]
 80020f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002102:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d106      	bne.n	8002128 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	3b01      	subs	r3, #1
 8002120:	045b      	lsls	r3, r3, #17
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	2b00      	cmp	r3, #0
 800212e:	d009      	beq.n	8002144 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	4b42      	ldr	r3, [pc, #264]	; (8002254 <HAL_ADC_Init+0x280>)
 800214c:	4013      	ands	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	430b      	orrs	r3, r1
 8002156:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff26 	bl	8001fae <LL_ADC_INJ_IsConversionOngoing>
 8002162:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d13d      	bne.n	80021e6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d13a      	bne.n	80021e6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002174:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800217c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800218c:	f023 0302 	bic.w	r3, r3, #2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	69b9      	ldr	r1, [r7, #24]
 8002196:	430b      	orrs	r3, r1
 8002198:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d118      	bne.n	80021d6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021ae:	f023 0304 	bic.w	r3, r3, #4
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021ba:	4311      	orrs	r1, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021c0:	4311      	orrs	r1, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021c6:	430a      	orrs	r2, r1
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	611a      	str	r2, [r3, #16]
 80021d4:	e007      	b.n	80021e6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10c      	bne.n	8002208 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	f023 010f 	bic.w	r1, r3, #15
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
 8002206:	e007      	b.n	8002218 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 020f 	bic.w	r2, r2, #15
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221c:	f023 0303 	bic.w	r3, r3, #3
 8002220:	f043 0201 	orr.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	655a      	str	r2, [r3, #84]	; 0x54
 8002228:	e007      	b.n	800223a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	f043 0210 	orr.w	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800223a:	7ffb      	ldrb	r3, [r7, #31]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	2000000c 	.word	0x2000000c
 8002248:	053e2d63 	.word	0x053e2d63
 800224c:	50040000 	.word	0x50040000
 8002250:	50040300 	.word	0x50040300
 8002254:	fff0c007 	.word	0xfff0c007

08002258 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fe7b 	bl	8001f60 <LL_ADC_REG_IsConversionOngoing>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d14f      	bne.n	8002310 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_ADC_Start+0x26>
 800227a:	2302      	movs	r3, #2
 800227c:	e04b      	b.n	8002316 <HAL_ADC_Start+0xbe>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fdb6 	bl	8002df8 <ADC_Enable>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d137      	bne.n	8002306 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b6:	d106      	bne.n	80022c6 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	f023 0206 	bic.w	r2, r3, #6
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	659a      	str	r2, [r3, #88]	; 0x58
 80022c4:	e002      	b.n	80022cc <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	221c      	movs	r2, #28
 80022d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fe06 	bl	8001f10 <LL_ADC_REG_StartConversion>
 8002304:	e006      	b.n	8002314 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800230e:	e001      	b.n	8002314 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002310:	2302      	movs	r3, #2
 8002312:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_ADC_Stop+0x16>
 8002330:	2302      	movs	r3, #2
 8002332:	e023      	b.n	800237c <HAL_ADC_Stop+0x5e>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800233c:	2103      	movs	r1, #3
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fc9e 	bl	8002c80 <ADC_ConversionStop>
 8002344:	4603      	mov	r3, r0
 8002346:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d111      	bne.n	8002372 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fdd8 	bl	8002f04 <ADC_Disable>
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	f043 0201 	orr.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	2b08      	cmp	r3, #8
 8002394:	d102      	bne.n	800239c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002396:	2308      	movs	r3, #8
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	e010      	b.n	80023be <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d007      	beq.n	80023ba <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06f      	b.n	800249a <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80023ba:	2304      	movs	r3, #4
 80023bc:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80023be:	f7ff fbe7 	bl	8001b90 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023c4:	e021      	b.n	800240a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d01d      	beq.n	800240a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80023ce:	f7ff fbdf 	bl	8001b90 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d302      	bcc.n	80023e4 <HAL_ADC_PollForConversion+0x60>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d112      	bne.n	800240a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10b      	bne.n	800240a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f043 0204 	orr.w	r2, r3, #4
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e047      	b.n	800249a <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0d6      	beq.n	80023c6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fc46 	bl	8001cba <LL_ADC_REG_IsTriggerSourceSWStart>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01c      	beq.n	800246e <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7e5b      	ldrb	r3, [r3, #25]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d118      	bne.n	800246e <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b08      	cmp	r3, #8
 8002448:	d111      	bne.n	800246e <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d105      	bne.n	800246e <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	f043 0201 	orr.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d104      	bne.n	8002486 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2208      	movs	r2, #8
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e008      	b.n	8002498 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d103      	bne.n	8002498 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	220c      	movs	r2, #12
 8002496:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b0b6      	sub	sp, #216	; 0xd8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x22>
 80024da:	2302      	movs	r3, #2
 80024dc:	e3bb      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x79a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fd38 	bl	8001f60 <LL_ADC_REG_IsConversionOngoing>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f040 83a0 	bne.w	8002c38 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d824      	bhi.n	8002552 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	3b02      	subs	r3, #2
 800250e:	2b03      	cmp	r3, #3
 8002510:	d81b      	bhi.n	800254a <HAL_ADC_ConfigChannel+0x8e>
 8002512:	a201      	add	r2, pc, #4	; (adr r2, 8002518 <HAL_ADC_ConfigChannel+0x5c>)
 8002514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002518:	08002529 	.word	0x08002529
 800251c:	08002531 	.word	0x08002531
 8002520:	08002539 	.word	0x08002539
 8002524:	08002541 	.word	0x08002541
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002528:	230c      	movs	r3, #12
 800252a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800252e:	e010      	b.n	8002552 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002530:	2312      	movs	r3, #18
 8002532:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002536:	e00c      	b.n	8002552 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002538:	2318      	movs	r3, #24
 800253a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800253e:	e008      	b.n	8002552 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002548:	e003      	b.n	8002552 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800254a:	2306      	movs	r3, #6
 800254c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002550:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002560:	f7ff fbbe 	bl	8001ce0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fcf9 	bl	8001f60 <LL_ADC_REG_IsConversionOngoing>
 800256e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fd19 	bl	8001fae <LL_ADC_INJ_IsConversionOngoing>
 800257c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002584:	2b00      	cmp	r3, #0
 8002586:	f040 81a4 	bne.w	80028d2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800258a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 819f 	bne.w	80028d2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6819      	ldr	r1, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	461a      	mov	r2, r3
 80025a2:	f7ff fbc9 	bl	8001d38 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	08db      	lsrs	r3, r3, #3
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d00a      	beq.n	80025de <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6919      	ldr	r1, [r3, #16]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025d8:	f7ff fb1a 	bl	8001c10 <LL_ADC_SetOffset>
 80025dc:	e179      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fb37 	bl	8001c58 <LL_ADC_GetOffsetChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <HAL_ADC_ConfigChannel+0x14e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fb2c 	bl	8001c58 <LL_ADC_GetOffsetChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	e01e      	b.n	8002648 <HAL_ADC_ConfigChannel+0x18c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fb21 	bl	8001c58 <LL_ADC_GetOffsetChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002628:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800262c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e004      	b.n	8002646 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800263c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x1a4>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0e9b      	lsrs	r3, r3, #26
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	e018      	b.n	8002692 <HAL_ADC_ConfigChannel+0x1d6>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002674:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800267c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e004      	b.n	8002692 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002688:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002692:	429a      	cmp	r2, r3
 8002694:	d106      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff faf0 	bl	8001c84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2101      	movs	r1, #1
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fad4 	bl	8001c58 <LL_ADC_GetOffsetChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x214>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2101      	movs	r1, #1
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fac9 	bl	8001c58 <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	f003 021f 	and.w	r2, r3, #31
 80026ce:	e01e      	b.n	800270e <HAL_ADC_ConfigChannel+0x252>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2101      	movs	r1, #1
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fabe 	bl	8001c58 <LL_ADC_GetOffsetChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80026ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80026f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80026fe:	2320      	movs	r3, #32
 8002700:	e004      	b.n	800270c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002716:	2b00      	cmp	r3, #0
 8002718:	d105      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x26a>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	e018      	b.n	8002758 <HAL_ADC_ConfigChannel+0x29c>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800273a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800273e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002742:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800274a:	2320      	movs	r3, #32
 800274c:	e004      	b.n	8002758 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800274e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002758:	429a      	cmp	r2, r3
 800275a:	d106      	bne.n	800276a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2200      	movs	r2, #0
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fa8d 	bl	8001c84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2102      	movs	r1, #2
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fa71 	bl	8001c58 <LL_ADC_GetOffsetChannel>
 8002776:	4603      	mov	r3, r0
 8002778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x2da>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2102      	movs	r1, #2
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fa66 	bl	8001c58 <LL_ADC_GetOffsetChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	0e9b      	lsrs	r3, r3, #26
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	e01e      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x318>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2102      	movs	r1, #2
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fa5b 	bl	8001c58 <LL_ADC_GetOffsetChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80027b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80027bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80027c4:	2320      	movs	r3, #32
 80027c6:	e004      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80027c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x330>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	e014      	b.n	8002816 <HAL_ADC_ConfigChannel+0x35a>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80027fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002808:	2320      	movs	r3, #32
 800280a:	e004      	b.n	8002816 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800280c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002816:	429a      	cmp	r2, r3
 8002818:	d106      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2200      	movs	r2, #0
 8002820:	2102      	movs	r1, #2
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fa2e 	bl	8001c84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2103      	movs	r1, #3
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fa12 	bl	8001c58 <LL_ADC_GetOffsetChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10a      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x398>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2103      	movs	r1, #3
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fa07 	bl	8001c58 <LL_ADC_GetOffsetChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	f003 021f 	and.w	r2, r3, #31
 8002852:	e017      	b.n	8002884 <HAL_ADC_ConfigChannel+0x3c8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2103      	movs	r1, #3
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff f9fc 	bl	8001c58 <LL_ADC_GetOffsetChannel>
 8002860:	4603      	mov	r3, r0
 8002862:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800286c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002870:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002876:	2320      	movs	r3, #32
 8002878:	e003      	b.n	8002882 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800287a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_ADC_ConfigChannel+0x3e0>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0e9b      	lsrs	r3, r3, #26
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	e011      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x404>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80028aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ac:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80028ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80028b4:	2320      	movs	r3, #32
 80028b6:	e003      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80028b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d106      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2103      	movs	r1, #3
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff f9d9 	bl	8001c84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff faf4 	bl	8001ec4 <LL_ADC_IsEnabled>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 8140 	bne.w	8002b64 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6819      	ldr	r1, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	461a      	mov	r2, r3
 80028f2:	f7ff fa4d 	bl	8001d90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4a8f      	ldr	r2, [pc, #572]	; (8002b38 <HAL_ADC_ConfigChannel+0x67c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	f040 8131 	bne.w	8002b64 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10b      	bne.n	800292a <HAL_ADC_ConfigChannel+0x46e>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	0e9b      	lsrs	r3, r3, #26
 8002918:	3301      	adds	r3, #1
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2b09      	cmp	r3, #9
 8002920:	bf94      	ite	ls
 8002922:	2301      	movls	r3, #1
 8002924:	2300      	movhi	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	e019      	b.n	800295e <HAL_ADC_ConfigChannel+0x4a2>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800293c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002942:	2320      	movs	r3, #32
 8002944:	e003      	b.n	800294e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	2b09      	cmp	r3, #9
 8002956:	bf94      	ite	ls
 8002958:	2301      	movls	r3, #1
 800295a:	2300      	movhi	r3, #0
 800295c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800295e:	2b00      	cmp	r3, #0
 8002960:	d079      	beq.n	8002a56 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	2b00      	cmp	r3, #0
 800296c:	d107      	bne.n	800297e <HAL_ADC_ConfigChannel+0x4c2>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0e9b      	lsrs	r3, r3, #26
 8002974:	3301      	adds	r3, #1
 8002976:	069b      	lsls	r3, r3, #26
 8002978:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800297c:	e015      	b.n	80029aa <HAL_ADC_ConfigChannel+0x4ee>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800298c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002996:	2320      	movs	r3, #32
 8002998:	e003      	b.n	80029a2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800299a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	069b      	lsls	r3, r3, #26
 80029a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x50e>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	0e9b      	lsrs	r3, r3, #26
 80029bc:	3301      	adds	r3, #1
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	e017      	b.n	80029fa <HAL_ADC_ConfigChannel+0x53e>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80029d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029da:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80029dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e003      	b.n	80029ee <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80029e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	2101      	movs	r1, #1
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	ea42 0103 	orr.w	r1, r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10a      	bne.n	8002a20 <HAL_ADC_ConfigChannel+0x564>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0e9b      	lsrs	r3, r3, #26
 8002a10:	3301      	adds	r3, #1
 8002a12:	f003 021f 	and.w	r2, r3, #31
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	051b      	lsls	r3, r3, #20
 8002a1e:	e018      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x596>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002a38:	2320      	movs	r3, #32
 8002a3a:	e003      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f003 021f 	and.w	r2, r3, #31
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a52:	430b      	orrs	r3, r1
 8002a54:	e081      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d107      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x5b6>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	3301      	adds	r3, #1
 8002a6a:	069b      	lsls	r3, r3, #26
 8002a6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a70:	e015      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x5e2>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	e003      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	069b      	lsls	r3, r3, #26
 8002a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x602>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0e9b      	lsrs	r3, r3, #26
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	e017      	b.n	8002aee <HAL_ADC_ConfigChannel+0x632>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	61bb      	str	r3, [r7, #24]
  return result;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e003      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	2101      	movs	r1, #1
 8002aea:	fa01 f303 	lsl.w	r3, r1, r3
 8002aee:	ea42 0103 	orr.w	r1, r2, r3
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x65e>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	0e9b      	lsrs	r3, r3, #26
 8002b04:	3301      	adds	r3, #1
 8002b06:	f003 021f 	and.w	r2, r3, #31
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	3b1e      	subs	r3, #30
 8002b12:	051b      	lsls	r3, r3, #20
 8002b14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b18:	e01e      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x69c>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	60fb      	str	r3, [r7, #12]
  return result;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d104      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e006      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x688>
 8002b36:	bf00      	nop
 8002b38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	f003 021f 	and.w	r2, r3, #31
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	3b1e      	subs	r3, #30
 8002b52:	051b      	lsls	r3, r3, #20
 8002b54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b58:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f7ff f8ea 	bl	8001d38 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <HAL_ADC_ConfigChannel+0x7a4>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d06c      	beq.n	8002c4a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b70:	483c      	ldr	r0, [pc, #240]	; (8002c64 <HAL_ADC_ConfigChannel+0x7a8>)
 8002b72:	f7ff f83f 	bl	8001bf4 <LL_ADC_GetCommonPathInternalCh>
 8002b76:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a3a      	ldr	r2, [pc, #232]	; (8002c68 <HAL_ADC_ConfigChannel+0x7ac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d127      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d121      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a35      	ldr	r2, [pc, #212]	; (8002c6c <HAL_ADC_ConfigChannel+0x7b0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d157      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	482f      	ldr	r0, [pc, #188]	; (8002c64 <HAL_ADC_ConfigChannel+0x7a8>)
 8002ba6:	f7ff f812 	bl	8001bce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_ADC_ConfigChannel+0x7b4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	099b      	lsrs	r3, r3, #6
 8002bb0:	4a30      	ldr	r2, [pc, #192]	; (8002c74 <HAL_ADC_ConfigChannel+0x7b8>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	099b      	lsrs	r3, r3, #6
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bc4:	e002      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f9      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd2:	e03a      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a27      	ldr	r2, [pc, #156]	; (8002c78 <HAL_ADC_ConfigChannel+0x7bc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d113      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <HAL_ADC_ConfigChannel+0x7b0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d12a      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4819      	ldr	r0, [pc, #100]	; (8002c64 <HAL_ADC_ConfigChannel+0x7a8>)
 8002c00:	f7fe ffe5 	bl	8001bce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c04:	e021      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <HAL_ADC_ConfigChannel+0x7c0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d11c      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d116      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <HAL_ADC_ConfigChannel+0x7b0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d111      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c2e:	4619      	mov	r1, r3
 8002c30:	480c      	ldr	r0, [pc, #48]	; (8002c64 <HAL_ADC_ConfigChannel+0x7a8>)
 8002c32:	f7fe ffcc 	bl	8001bce <LL_ADC_SetCommonPathInternalCh>
 8002c36:	e008      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c52:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	37d8      	adds	r7, #216	; 0xd8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	80080000 	.word	0x80080000
 8002c64:	50040300 	.word	0x50040300
 8002c68:	c7520000 	.word	0xc7520000
 8002c6c:	50040000 	.word	0x50040000
 8002c70:	2000000c 	.word	0x2000000c
 8002c74:	053e2d63 	.word	0x053e2d63
 8002c78:	cb840000 	.word	0xcb840000
 8002c7c:	80000001 	.word	0x80000001

08002c80 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff f962 	bl	8001f60 <LL_ADC_REG_IsConversionOngoing>
 8002c9c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff f983 	bl	8001fae <LL_ADC_INJ_IsConversionOngoing>
 8002ca8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d103      	bne.n	8002cb8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8098 	beq.w	8002de8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d02a      	beq.n	8002d1c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7e5b      	ldrb	r3, [r3, #25]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d126      	bne.n	8002d1c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	7e1b      	ldrb	r3, [r3, #24]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d122      	bne.n	8002d1c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002cda:	e014      	b.n	8002d06 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	4a45      	ldr	r2, [pc, #276]	; (8002df4 <ADC_ConversionStop+0x174>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d90d      	bls.n	8002d00 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce8:	f043 0210 	orr.w	r2, r3, #16
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	f043 0201 	orr.w	r2, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e074      	b.n	8002dea <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	3301      	adds	r3, #1
 8002d04:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d1e3      	bne.n	8002cdc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2240      	movs	r2, #64	; 0x40
 8002d1a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d014      	beq.n	8002d4c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff f91a 	bl	8001f60 <LL_ADC_REG_IsConversionOngoing>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00c      	beq.n	8002d4c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff f8d7 	bl	8001eea <LL_ADC_IsDisableOngoing>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d104      	bne.n	8002d4c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff f8f6 	bl	8001f38 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d014      	beq.n	8002d7c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff f929 	bl	8001fae <LL_ADC_INJ_IsConversionOngoing>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f8bf 	bl	8001eea <LL_ADC_IsDisableOngoing>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d104      	bne.n	8002d7c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f905 	bl	8001f86 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d005      	beq.n	8002d8e <ADC_ConversionStop+0x10e>
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d105      	bne.n	8002d94 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002d88:	230c      	movs	r3, #12
 8002d8a:	617b      	str	r3, [r7, #20]
        break;
 8002d8c:	e005      	b.n	8002d9a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002d8e:	2308      	movs	r3, #8
 8002d90:	617b      	str	r3, [r7, #20]
        break;
 8002d92:	e002      	b.n	8002d9a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002d94:	2304      	movs	r3, #4
 8002d96:	617b      	str	r3, [r7, #20]
        break;
 8002d98:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002d9a:	f7fe fef9 	bl	8001b90 <HAL_GetTick>
 8002d9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002da0:	e01b      	b.n	8002dda <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002da2:	f7fe fef5 	bl	8001b90 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	d914      	bls.n	8002dda <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00d      	beq.n	8002dda <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e007      	b.n	8002dea <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1dc      	bne.n	8002da2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	a33fffff 	.word	0xa33fffff

08002df8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff f85b 	bl	8001ec4 <LL_ADC_IsEnabled>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d169      	bne.n	8002ee8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	4b36      	ldr	r3, [pc, #216]	; (8002ef4 <ADC_Enable+0xfc>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	f043 0210 	orr.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e055      	b.n	8002eea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff f816 	bl	8001e74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e48:	482b      	ldr	r0, [pc, #172]	; (8002ef8 <ADC_Enable+0x100>)
 8002e4a:	f7fe fed3 	bl	8001bf4 <LL_ADC_GetCommonPathInternalCh>
 8002e4e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e58:	4b28      	ldr	r3, [pc, #160]	; (8002efc <ADC_Enable+0x104>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	4a28      	ldr	r2, [pc, #160]	; (8002f00 <ADC_Enable+0x108>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	099b      	lsrs	r3, r3, #6
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e72:	e002      	b.n	8002e7a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f9      	bne.n	8002e74 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e80:	f7fe fe86 	bl	8001b90 <HAL_GetTick>
 8002e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e86:	e028      	b.n	8002eda <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff f819 	bl	8001ec4 <LL_ADC_IsEnabled>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d104      	bne.n	8002ea2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fe ffe9 	bl	8001e74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ea2:	f7fe fe75 	bl	8001b90 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d914      	bls.n	8002eda <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d00d      	beq.n	8002eda <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	f043 0210 	orr.w	r2, r3, #16
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	f043 0201 	orr.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e007      	b.n	8002eea <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d1cf      	bne.n	8002e88 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	8000003f 	.word	0x8000003f
 8002ef8:	50040300 	.word	0x50040300
 8002efc:	2000000c 	.word	0x2000000c
 8002f00:	053e2d63 	.word	0x053e2d63

08002f04 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe ffea 	bl	8001eea <LL_ADC_IsDisableOngoing>
 8002f16:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe ffd1 	bl	8001ec4 <LL_ADC_IsEnabled>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d047      	beq.n	8002fb8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d144      	bne.n	8002fb8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030d 	and.w	r3, r3, #13
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d10c      	bne.n	8002f56 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe ffab 	bl	8001e9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f4e:	f7fe fe1f 	bl	8001b90 <HAL_GetTick>
 8002f52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f54:	e029      	b.n	8002faa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	f043 0210 	orr.w	r2, r3, #16
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	f043 0201 	orr.w	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e023      	b.n	8002fba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f72:	f7fe fe0d 	bl	8001b90 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d914      	bls.n	8002faa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e007      	b.n	8002fba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1dc      	bne.n	8002f72 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ff6:	4a04      	ldr	r2, [pc, #16]	; (8003008 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	60d3      	str	r3, [r2, #12]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <__NVIC_GetPriorityGrouping+0x18>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	f003 0307 	and.w	r3, r3, #7
}
 800301a:	4618      	mov	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	2b00      	cmp	r3, #0
 8003038:	db0b      	blt.n	8003052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	f003 021f 	and.w	r2, r3, #31
 8003040:	4907      	ldr	r1, [pc, #28]	; (8003060 <__NVIC_EnableIRQ+0x38>)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	2001      	movs	r0, #1
 800304a:	fa00 f202 	lsl.w	r2, r0, r2
 800304e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000e100 	.word	0xe000e100

08003064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	6039      	str	r1, [r7, #0]
 800306e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	2b00      	cmp	r3, #0
 8003076:	db0a      	blt.n	800308e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	b2da      	uxtb	r2, r3
 800307c:	490c      	ldr	r1, [pc, #48]	; (80030b0 <__NVIC_SetPriority+0x4c>)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	0112      	lsls	r2, r2, #4
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	440b      	add	r3, r1
 8003088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800308c:	e00a      	b.n	80030a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4908      	ldr	r1, [pc, #32]	; (80030b4 <__NVIC_SetPriority+0x50>)
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	3b04      	subs	r3, #4
 800309c:	0112      	lsls	r2, r2, #4
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	440b      	add	r3, r1
 80030a2:	761a      	strb	r2, [r3, #24]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000e100 	.word	0xe000e100
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	; 0x24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f1c3 0307 	rsb	r3, r3, #7
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	bf28      	it	cs
 80030d6:	2304      	movcs	r3, #4
 80030d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3304      	adds	r3, #4
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d902      	bls.n	80030e8 <NVIC_EncodePriority+0x30>
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3b03      	subs	r3, #3
 80030e6:	e000      	b.n	80030ea <NVIC_EncodePriority+0x32>
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43da      	mvns	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	401a      	ands	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003100:	f04f 31ff 	mov.w	r1, #4294967295
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	43d9      	mvns	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	4313      	orrs	r3, r2
         );
}
 8003112:	4618      	mov	r0, r3
 8003114:	3724      	adds	r7, #36	; 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003130:	d301      	bcc.n	8003136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003132:	2301      	movs	r3, #1
 8003134:	e00f      	b.n	8003156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003136:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <SysTick_Config+0x40>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800313e:	210f      	movs	r1, #15
 8003140:	f04f 30ff 	mov.w	r0, #4294967295
 8003144:	f7ff ff8e 	bl	8003064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <SysTick_Config+0x40>)
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800314e:	4b04      	ldr	r3, [pc, #16]	; (8003160 <SysTick_Config+0x40>)
 8003150:	2207      	movs	r2, #7
 8003152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	e000e010 	.word	0xe000e010

08003164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ff29 	bl	8002fc4 <__NVIC_SetPriorityGrouping>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
 8003186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800318c:	f7ff ff3e 	bl	800300c <__NVIC_GetPriorityGrouping>
 8003190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	6978      	ldr	r0, [r7, #20]
 8003198:	f7ff ff8e 	bl	80030b8 <NVIC_EncodePriority>
 800319c:	4602      	mov	r2, r0
 800319e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff5d 	bl	8003064 <__NVIC_SetPriority>
}
 80031aa:	bf00      	nop
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff31 	bl	8003028 <__NVIC_EnableIRQ>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ffa2 	bl	8003120 <SysTick_Config>
 80031dc:	4603      	mov	r3, r0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f6:	e148      	b.n	800348a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2101      	movs	r1, #1
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa01 f303 	lsl.w	r3, r1, r3
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 813a 	beq.w	8003484 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d005      	beq.n	8003228 <HAL_GPIO_Init+0x40>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d130      	bne.n	800328a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800325e:	2201      	movs	r2, #1
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f003 0201 	and.w	r2, r3, #1
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b03      	cmp	r3, #3
 8003294:	d017      	beq.n	80032c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d123      	bne.n	800331a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	08da      	lsrs	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3208      	adds	r2, #8
 80032da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	220f      	movs	r2, #15
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	08da      	lsrs	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3208      	adds	r2, #8
 8003314:	6939      	ldr	r1, [r7, #16]
 8003316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	2203      	movs	r2, #3
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0203 	and.w	r2, r3, #3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 8094 	beq.w	8003484 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335c:	4b52      	ldr	r3, [pc, #328]	; (80034a8 <HAL_GPIO_Init+0x2c0>)
 800335e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003360:	4a51      	ldr	r2, [pc, #324]	; (80034a8 <HAL_GPIO_Init+0x2c0>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6613      	str	r3, [r2, #96]	; 0x60
 8003368:	4b4f      	ldr	r3, [pc, #316]	; (80034a8 <HAL_GPIO_Init+0x2c0>)
 800336a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003374:	4a4d      	ldr	r2, [pc, #308]	; (80034ac <HAL_GPIO_Init+0x2c4>)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	3302      	adds	r3, #2
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	220f      	movs	r2, #15
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800339e:	d00d      	beq.n	80033bc <HAL_GPIO_Init+0x1d4>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a43      	ldr	r2, [pc, #268]	; (80034b0 <HAL_GPIO_Init+0x2c8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d007      	beq.n	80033b8 <HAL_GPIO_Init+0x1d0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a42      	ldr	r2, [pc, #264]	; (80034b4 <HAL_GPIO_Init+0x2cc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d101      	bne.n	80033b4 <HAL_GPIO_Init+0x1cc>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e004      	b.n	80033be <HAL_GPIO_Init+0x1d6>
 80033b4:	2307      	movs	r3, #7
 80033b6:	e002      	b.n	80033be <HAL_GPIO_Init+0x1d6>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_GPIO_Init+0x1d6>
 80033bc:	2300      	movs	r3, #0
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	f002 0203 	and.w	r2, r2, #3
 80033c4:	0092      	lsls	r2, r2, #2
 80033c6:	4093      	lsls	r3, r2
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033ce:	4937      	ldr	r1, [pc, #220]	; (80034ac <HAL_GPIO_Init+0x2c4>)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	089b      	lsrs	r3, r3, #2
 80033d4:	3302      	adds	r3, #2
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033dc:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <HAL_GPIO_Init+0x2d0>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4013      	ands	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003400:	4a2d      	ldr	r2, [pc, #180]	; (80034b8 <HAL_GPIO_Init+0x2d0>)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003406:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <HAL_GPIO_Init+0x2d0>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	43db      	mvns	r3, r3
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4013      	ands	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800342a:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <HAL_GPIO_Init+0x2d0>)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003430:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <HAL_GPIO_Init+0x2d0>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	43db      	mvns	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003454:	4a18      	ldr	r2, [pc, #96]	; (80034b8 <HAL_GPIO_Init+0x2d0>)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <HAL_GPIO_Init+0x2d0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43db      	mvns	r3, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800347e:	4a0e      	ldr	r2, [pc, #56]	; (80034b8 <HAL_GPIO_Init+0x2d0>)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	3301      	adds	r3, #1
 8003488:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	f47f aeaf 	bne.w	80031f8 <HAL_GPIO_Init+0x10>
  }
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40010000 	.word	0x40010000
 80034b0:	48000400 	.word	0x48000400
 80034b4:	48000800 	.word	0x48000800
 80034b8:	40010400 	.word	0x40010400

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034d8:	e002      	b.n	80034e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034fe:	887a      	ldrh	r2, [r7, #2]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4013      	ands	r3, r2
 8003504:	041a      	lsls	r2, r3, #16
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	43d9      	mvns	r1, r3
 800350a:	887b      	ldrh	r3, [r7, #2]
 800350c:	400b      	ands	r3, r1
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	619a      	str	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800352a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40007000 	.word	0x40007000

08003540 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <HAL_PWREx_GetVoltageRange+0x18>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40007000 	.word	0x40007000

0800355c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356a:	d130      	bne.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800356c:	4b23      	ldr	r3, [pc, #140]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003578:	d038      	beq.n	80035ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800357a:	4b20      	ldr	r3, [pc, #128]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003582:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003588:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800358a:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2232      	movs	r2, #50	; 0x32
 8003590:	fb02 f303 	mul.w	r3, r2, r3
 8003594:	4a1b      	ldr	r2, [pc, #108]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	0c9b      	lsrs	r3, r3, #18
 800359c:	3301      	adds	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035a0:	e002      	b.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b4:	d102      	bne.n	80035bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f2      	bne.n	80035a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c8:	d110      	bne.n	80035ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e00f      	b.n	80035ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035da:	d007      	beq.n	80035ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035dc:	4b07      	ldr	r3, [pc, #28]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035e4:	4a05      	ldr	r2, [pc, #20]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40007000 	.word	0x40007000
 8003600:	2000000c 	.word	0x2000000c
 8003604:	431bde83 	.word	0x431bde83

08003608 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f000 bc02 	b.w	8003e20 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800361c:	4b96      	ldr	r3, [pc, #600]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003626:	4b94      	ldr	r3, [pc, #592]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80e4 	beq.w	8003806 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <HAL_RCC_OscConfig+0x4c>
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b0c      	cmp	r3, #12
 8003648:	f040 808b 	bne.w	8003762 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b01      	cmp	r3, #1
 8003650:	f040 8087 	bne.w	8003762 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003654:	4b88      	ldr	r3, [pc, #544]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_OscConfig+0x64>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e3d9      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	4b81      	ldr	r3, [pc, #516]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <HAL_RCC_OscConfig+0x7e>
 800367c:	4b7e      	ldr	r3, [pc, #504]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003684:	e005      	b.n	8003692 <HAL_RCC_OscConfig+0x8a>
 8003686:	4b7c      	ldr	r3, [pc, #496]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 8003688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003692:	4293      	cmp	r3, r2
 8003694:	d223      	bcs.n	80036de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fd8c 	bl	80041b8 <RCC_SetFlashLatencyFromMSIRange>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e3ba      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036aa:	4b73      	ldr	r3, [pc, #460]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a72      	ldr	r2, [pc, #456]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80036b0:	f043 0308 	orr.w	r3, r3, #8
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b70      	ldr	r3, [pc, #448]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	496d      	ldr	r1, [pc, #436]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036c8:	4b6b      	ldr	r3, [pc, #428]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	4968      	ldr	r1, [pc, #416]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
 80036dc:	e025      	b.n	800372a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036de:	4b66      	ldr	r3, [pc, #408]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a65      	ldr	r2, [pc, #404]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80036e4:	f043 0308 	orr.w	r3, r3, #8
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b63      	ldr	r3, [pc, #396]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	4960      	ldr	r1, [pc, #384]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036fc:	4b5e      	ldr	r3, [pc, #376]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	495b      	ldr	r1, [pc, #364]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fd4c 	bl	80041b8 <RCC_SetFlashLatencyFromMSIRange>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e37a      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800372a:	f000 fc81 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 800372e:	4602      	mov	r2, r0
 8003730:	4b51      	ldr	r3, [pc, #324]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	4950      	ldr	r1, [pc, #320]	; (800387c <HAL_RCC_OscConfig+0x274>)
 800373c:	5ccb      	ldrb	r3, [r1, r3]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a4e      	ldr	r2, [pc, #312]	; (8003880 <HAL_RCC_OscConfig+0x278>)
 8003748:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800374a:	4b4e      	ldr	r3, [pc, #312]	; (8003884 <HAL_RCC_OscConfig+0x27c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f9ce 	bl	8001af0 <HAL_InitTick>
 8003754:	4603      	mov	r3, r0
 8003756:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d052      	beq.n	8003804 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	e35e      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d032      	beq.n	80037d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800376a:	4b43      	ldr	r3, [pc, #268]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a42      	ldr	r2, [pc, #264]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003776:	f7fe fa0b 	bl	8001b90 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800377e:	f7fe fa07 	bl	8001b90 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e347      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800379c:	4b36      	ldr	r3, [pc, #216]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a35      	ldr	r2, [pc, #212]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80037a2:	f043 0308 	orr.w	r3, r3, #8
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b33      	ldr	r3, [pc, #204]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4930      	ldr	r1, [pc, #192]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ba:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	492b      	ldr	r1, [pc, #172]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	604b      	str	r3, [r1, #4]
 80037ce:	e01a      	b.n	8003806 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037d0:	4b29      	ldr	r3, [pc, #164]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a28      	ldr	r2, [pc, #160]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037dc:	f7fe f9d8 	bl	8001b90 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037e4:	f7fe f9d4 	bl	8001b90 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e314      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x1dc>
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003804:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d073      	beq.n	80038fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d005      	beq.n	8003824 <HAL_RCC_OscConfig+0x21c>
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b0c      	cmp	r3, #12
 800381c:	d10e      	bne.n	800383c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d10b      	bne.n	800383c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d063      	beq.n	80038f8 <HAL_RCC_OscConfig+0x2f0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d15f      	bne.n	80038f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e2f1      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003844:	d106      	bne.n	8003854 <HAL_RCC_OscConfig+0x24c>
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e025      	b.n	80038a0 <HAL_RCC_OscConfig+0x298>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800385c:	d114      	bne.n	8003888 <HAL_RCC_OscConfig+0x280>
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a05      	ldr	r2, [pc, #20]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 8003864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a02      	ldr	r2, [pc, #8]	; (8003878 <HAL_RCC_OscConfig+0x270>)
 8003870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e013      	b.n	80038a0 <HAL_RCC_OscConfig+0x298>
 8003878:	40021000 	.word	0x40021000
 800387c:	080068f0 	.word	0x080068f0
 8003880:	2000000c 	.word	0x2000000c
 8003884:	20000010 	.word	0x20000010
 8003888:	4ba0      	ldr	r3, [pc, #640]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a9f      	ldr	r2, [pc, #636]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 800388e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	4b9d      	ldr	r3, [pc, #628]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a9c      	ldr	r2, [pc, #624]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 800389a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d013      	beq.n	80038d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fe f972 	bl	8001b90 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe f96e 	bl	8001b90 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e2ae      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038c2:	4b92      	ldr	r3, [pc, #584]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x2a8>
 80038ce:	e014      	b.n	80038fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fe f95e 	bl	8001b90 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d8:	f7fe f95a 	bl	8001b90 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	; 0x64
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e29a      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ea:	4b88      	ldr	r3, [pc, #544]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x2d0>
 80038f6:	e000      	b.n	80038fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d060      	beq.n	80039c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	2b04      	cmp	r3, #4
 800390a:	d005      	beq.n	8003918 <HAL_RCC_OscConfig+0x310>
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b0c      	cmp	r3, #12
 8003910:	d119      	bne.n	8003946 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d116      	bne.n	8003946 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003918:	4b7c      	ldr	r3, [pc, #496]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_RCC_OscConfig+0x328>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e277      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003930:	4b76      	ldr	r3, [pc, #472]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	061b      	lsls	r3, r3, #24
 800393e:	4973      	ldr	r1, [pc, #460]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003944:	e040      	b.n	80039c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d023      	beq.n	8003996 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800394e:	4b6f      	ldr	r3, [pc, #444]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6e      	ldr	r2, [pc, #440]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fe f919 	bl	8001b90 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003962:	f7fe f915 	bl	8001b90 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e255      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003974:	4b65      	ldr	r3, [pc, #404]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003980:	4b62      	ldr	r3, [pc, #392]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	061b      	lsls	r3, r3, #24
 800398e:	495f      	ldr	r1, [pc, #380]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
 8003994:	e018      	b.n	80039c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003996:	4b5d      	ldr	r3, [pc, #372]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a5c      	ldr	r2, [pc, #368]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 800399c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a2:	f7fe f8f5 	bl	8001b90 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039aa:	f7fe f8f1 	bl	8001b90 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e231      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039bc:	4b53      	ldr	r3, [pc, #332]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d03c      	beq.n	8003a4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01c      	beq.n	8003a16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039dc:	4b4b      	ldr	r3, [pc, #300]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 80039de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e2:	4a4a      	ldr	r2, [pc, #296]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ec:	f7fe f8d0 	bl	8001b90 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f4:	f7fe f8cc 	bl	8001b90 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e20c      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a06:	4b41      	ldr	r3, [pc, #260]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0ef      	beq.n	80039f4 <HAL_RCC_OscConfig+0x3ec>
 8003a14:	e01b      	b.n	8003a4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a16:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a1c:	4a3b      	ldr	r2, [pc, #236]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a26:	f7fe f8b3 	bl	8001b90 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2e:	f7fe f8af 	bl	8001b90 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e1ef      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a40:	4b32      	ldr	r3, [pc, #200]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1ef      	bne.n	8003a2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80a6 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a60:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10d      	bne.n	8003a88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	4a26      	ldr	r2, [pc, #152]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a76:	6593      	str	r3, [r2, #88]	; 0x58
 8003a78:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a84:	2301      	movs	r3, #1
 8003a86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a88:	4b21      	ldr	r3, [pc, #132]	; (8003b10 <HAL_RCC_OscConfig+0x508>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d118      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a94:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <HAL_RCC_OscConfig+0x508>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1d      	ldr	r2, [pc, #116]	; (8003b10 <HAL_RCC_OscConfig+0x508>)
 8003a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa0:	f7fe f876 	bl	8001b90 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa8:	f7fe f872 	bl	8001b90 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e1b2      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <HAL_RCC_OscConfig+0x508>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d108      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x4d8>
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ade:	e029      	b.n	8003b34 <HAL_RCC_OscConfig+0x52c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	d115      	bne.n	8003b14 <HAL_RCC_OscConfig+0x50c>
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aee:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003af0:	f043 0304 	orr.w	r3, r3, #4
 8003af4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	4a03      	ldr	r2, [pc, #12]	; (8003b0c <HAL_RCC_OscConfig+0x504>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b08:	e014      	b.n	8003b34 <HAL_RCC_OscConfig+0x52c>
 8003b0a:	bf00      	nop
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40007000 	.word	0x40007000
 8003b14:	4b9a      	ldr	r3, [pc, #616]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	4a99      	ldr	r2, [pc, #612]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b24:	4b96      	ldr	r3, [pc, #600]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	4a95      	ldr	r2, [pc, #596]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d016      	beq.n	8003b6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fe f828 	bl	8001b90 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fe f824 	bl	8001b90 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e162      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b5a:	4b89      	ldr	r3, [pc, #548]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ed      	beq.n	8003b44 <HAL_RCC_OscConfig+0x53c>
 8003b68:	e015      	b.n	8003b96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6a:	f7fe f811 	bl	8001b90 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fe f80d 	bl	8001b90 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e14b      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b88:	4b7d      	ldr	r3, [pc, #500]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1ed      	bne.n	8003b72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b96:	7ffb      	ldrb	r3, [r7, #31]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d105      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9c:	4b78      	ldr	r3, [pc, #480]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	4a77      	ldr	r2, [pc, #476]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d03c      	beq.n	8003c2e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01c      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bbc:	4b70      	ldr	r3, [pc, #448]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc2:	4a6f      	ldr	r2, [pc, #444]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fd ffe0 	bl	8001b90 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bd4:	f7fd ffdc 	bl	8001b90 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e11c      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003be6:	4b66      	ldr	r3, [pc, #408]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ef      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x5cc>
 8003bf4:	e01b      	b.n	8003c2e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bf6:	4b62      	ldr	r3, [pc, #392]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bfc:	4a60      	ldr	r2, [pc, #384]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c06:	f7fd ffc3 	bl	8001b90 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c0e:	f7fd ffbf 	bl	8001b90 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0ff      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c20:	4b57      	ldr	r3, [pc, #348]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1ef      	bne.n	8003c0e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80f3 	beq.w	8003e1e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	f040 80c9 	bne.w	8003dd4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c42:	4b4f      	ldr	r3, [pc, #316]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f003 0203 	and.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d12c      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	3b01      	subs	r3, #1
 8003c62:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d123      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c72:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d11b      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d113      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	085b      	lsrs	r3, r3, #1
 8003c94:	3b01      	subs	r3, #1
 8003c96:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d109      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d06b      	beq.n	8003d88 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b0c      	cmp	r3, #12
 8003cb4:	d062      	beq.n	8003d7c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cb6:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e0ac      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003cc6:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a2d      	ldr	r2, [pc, #180]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003ccc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cd2:	f7fd ff5d 	bl	8001b90 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cda:	f7fd ff59 	bl	8001b90 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e099      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cec:	4b24      	ldr	r3, [pc, #144]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cf8:	4b21      	ldr	r3, [pc, #132]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	4b21      	ldr	r3, [pc, #132]	; (8003d84 <HAL_RCC_OscConfig+0x77c>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d08:	3a01      	subs	r2, #1
 8003d0a:	0112      	lsls	r2, r2, #4
 8003d0c:	4311      	orrs	r1, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d12:	0212      	lsls	r2, r2, #8
 8003d14:	4311      	orrs	r1, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d1a:	0852      	lsrs	r2, r2, #1
 8003d1c:	3a01      	subs	r2, #1
 8003d1e:	0552      	lsls	r2, r2, #21
 8003d20:	4311      	orrs	r1, r2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d26:	0852      	lsrs	r2, r2, #1
 8003d28:	3a01      	subs	r2, #1
 8003d2a:	0652      	lsls	r2, r2, #25
 8003d2c:	4311      	orrs	r1, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d32:	06d2      	lsls	r2, r2, #27
 8003d34:	430a      	orrs	r2, r1
 8003d36:	4912      	ldr	r1, [pc, #72]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d48:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a0c      	ldr	r2, [pc, #48]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d54:	f7fd ff1c 	bl	8001b90 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7fd ff18 	bl	8001b90 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e058      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d6e:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <HAL_RCC_OscConfig+0x778>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d7a:	e050      	b.n	8003e1e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e04f      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
 8003d80:	40021000 	.word	0x40021000
 8003d84:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d88:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_RCC_OscConfig+0x820>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d144      	bne.n	8003e1e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCC_OscConfig+0x820>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <HAL_RCC_OscConfig+0x820>)
 8003d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003da0:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <HAL_RCC_OscConfig+0x820>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4a20      	ldr	r2, [pc, #128]	; (8003e28 <HAL_RCC_OscConfig+0x820>)
 8003da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003daa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dac:	f7fd fef0 	bl	8001b90 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fd feec 	bl	8001b90 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e02c      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc6:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <HAL_RCC_OscConfig+0x820>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x7ac>
 8003dd2:	e024      	b.n	8003e1e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b0c      	cmp	r3, #12
 8003dd8:	d01f      	beq.n	8003e1a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dda:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <HAL_RCC_OscConfig+0x820>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <HAL_RCC_OscConfig+0x820>)
 8003de0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7fd fed3 	bl	8001b90 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dee:	f7fd fecf 	bl	8001b90 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e00f      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_RCC_OscConfig+0x820>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f0      	bne.n	8003dee <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_RCC_OscConfig+0x820>)
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	4905      	ldr	r1, [pc, #20]	; (8003e28 <HAL_RCC_OscConfig+0x820>)
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_RCC_OscConfig+0x824>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	60cb      	str	r3, [r1, #12]
 8003e18:	e001      	b.n	8003e1e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	feeefffc 	.word	0xfeeefffc

08003e30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0e7      	b.n	8004014 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e44:	4b75      	ldr	r3, [pc, #468]	; (800401c <HAL_RCC_ClockConfig+0x1ec>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d910      	bls.n	8003e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b72      	ldr	r3, [pc, #456]	; (800401c <HAL_RCC_ClockConfig+0x1ec>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 0207 	bic.w	r2, r3, #7
 8003e5a:	4970      	ldr	r1, [pc, #448]	; (800401c <HAL_RCC_ClockConfig+0x1ec>)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	4b6e      	ldr	r3, [pc, #440]	; (800401c <HAL_RCC_ClockConfig+0x1ec>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d001      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0cf      	b.n	8004014 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d010      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	4b66      	ldr	r3, [pc, #408]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d908      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e90:	4b63      	ldr	r3, [pc, #396]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4960      	ldr	r1, [pc, #384]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d04c      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb6:	4b5a      	ldr	r3, [pc, #360]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d121      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0a6      	b.n	8004014 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d107      	bne.n	8003ede <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ece:	4b54      	ldr	r3, [pc, #336]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d115      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e09a      	b.n	8004014 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d107      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ee6:	4b4e      	ldr	r3, [pc, #312]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e08e      	b.n	8004014 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ef6:	4b4a      	ldr	r3, [pc, #296]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e086      	b.n	8004014 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f06:	4b46      	ldr	r3, [pc, #280]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f023 0203 	bic.w	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	4943      	ldr	r1, [pc, #268]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f18:	f7fd fe3a 	bl	8001b90 <HAL_GetTick>
 8003f1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f20:	f7fd fe36 	bl	8001b90 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e06e      	b.n	8004014 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f36:	4b3a      	ldr	r3, [pc, #232]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 020c 	and.w	r2, r3, #12
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d1eb      	bne.n	8003f20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d010      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	4b31      	ldr	r3, [pc, #196]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d208      	bcs.n	8003f76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f64:	4b2e      	ldr	r3, [pc, #184]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	492b      	ldr	r1, [pc, #172]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f76:	4b29      	ldr	r3, [pc, #164]	; (800401c <HAL_RCC_ClockConfig+0x1ec>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d210      	bcs.n	8003fa6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f84:	4b25      	ldr	r3, [pc, #148]	; (800401c <HAL_RCC_ClockConfig+0x1ec>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f023 0207 	bic.w	r2, r3, #7
 8003f8c:	4923      	ldr	r1, [pc, #140]	; (800401c <HAL_RCC_ClockConfig+0x1ec>)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f94:	4b21      	ldr	r3, [pc, #132]	; (800401c <HAL_RCC_ClockConfig+0x1ec>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d001      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e036      	b.n	8004014 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	4918      	ldr	r1, [pc, #96]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d009      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fd0:	4b13      	ldr	r3, [pc, #76]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4910      	ldr	r1, [pc, #64]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fe4:	f000 f824 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <HAL_RCC_ClockConfig+0x1f0>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	490b      	ldr	r1, [pc, #44]	; (8004024 <HAL_RCC_ClockConfig+0x1f4>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8004000:	4a09      	ldr	r2, [pc, #36]	; (8004028 <HAL_RCC_ClockConfig+0x1f8>)
 8004002:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1fc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7fd fd71 	bl	8001af0 <HAL_InitTick>
 800400e:	4603      	mov	r3, r0
 8004010:	72fb      	strb	r3, [r7, #11]

  return status;
 8004012:	7afb      	ldrb	r3, [r7, #11]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40022000 	.word	0x40022000
 8004020:	40021000 	.word	0x40021000
 8004024:	080068f0 	.word	0x080068f0
 8004028:	2000000c 	.word	0x2000000c
 800402c:	20000010 	.word	0x20000010

08004030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004030:	b480      	push	{r7}
 8004032:	b089      	sub	sp, #36	; 0x24
 8004034:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
 800403a:	2300      	movs	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800403e:	4b3e      	ldr	r3, [pc, #248]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004048:	4b3b      	ldr	r3, [pc, #236]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x34>
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d121      	bne.n	80040a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d11e      	bne.n	80040a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004064:	4b34      	ldr	r3, [pc, #208]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d107      	bne.n	8004080 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004070:	4b31      	ldr	r3, [pc, #196]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 8004072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	61fb      	str	r3, [r7, #28]
 800407e:	e005      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004080:	4b2d      	ldr	r3, [pc, #180]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	091b      	lsrs	r3, r3, #4
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800408c:	4a2b      	ldr	r2, [pc, #172]	; (800413c <HAL_RCC_GetSysClockFreq+0x10c>)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004094:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10d      	bne.n	80040b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040a0:	e00a      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d102      	bne.n	80040ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040a8:	4b25      	ldr	r3, [pc, #148]	; (8004140 <HAL_RCC_GetSysClockFreq+0x110>)
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	e004      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040b4:	4b23      	ldr	r3, [pc, #140]	; (8004144 <HAL_RCC_GetSysClockFreq+0x114>)
 80040b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2b0c      	cmp	r3, #12
 80040bc:	d134      	bne.n	8004128 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040be:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d003      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d003      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0xac>
 80040d4:	e005      	b.n	80040e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_RCC_GetSysClockFreq+0x110>)
 80040d8:	617b      	str	r3, [r7, #20]
      break;
 80040da:	e005      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040dc:	4b19      	ldr	r3, [pc, #100]	; (8004144 <HAL_RCC_GetSysClockFreq+0x114>)
 80040de:	617b      	str	r3, [r7, #20]
      break;
 80040e0:	e002      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	617b      	str	r3, [r7, #20]
      break;
 80040e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040e8:	4b13      	ldr	r3, [pc, #76]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	3301      	adds	r3, #1
 80040f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	0a1b      	lsrs	r3, r3, #8
 80040fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	fb03 f202 	mul.w	r2, r3, r2
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <HAL_RCC_GetSysClockFreq+0x108>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	0e5b      	lsrs	r3, r3, #25
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	3301      	adds	r3, #1
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	fbb2 f3f3 	udiv	r3, r2, r3
 8004126:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004128:	69bb      	ldr	r3, [r7, #24]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3724      	adds	r7, #36	; 0x24
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000
 800413c:	08006908 	.word	0x08006908
 8004140:	00f42400 	.word	0x00f42400
 8004144:	007a1200 	.word	0x007a1200

08004148 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <HAL_RCC_GetHCLKFreq+0x14>)
 800414e:	681b      	ldr	r3, [r3, #0]
}
 8004150:	4618      	mov	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	2000000c 	.word	0x2000000c

08004160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004164:	f7ff fff0 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCC_GetPCLK1Freq+0x24>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	4904      	ldr	r1, [pc, #16]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40021000 	.word	0x40021000
 8004188:	08006900 	.word	0x08006900

0800418c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004190:	f7ff ffda 	bl	8004148 <HAL_RCC_GetHCLKFreq>
 8004194:	4602      	mov	r2, r0
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	0adb      	lsrs	r3, r3, #11
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	4904      	ldr	r1, [pc, #16]	; (80041b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041a2:	5ccb      	ldrb	r3, [r1, r3]
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40021000 	.word	0x40021000
 80041b4:	08006900 	.word	0x08006900

080041b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041c4:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041d0:	f7ff f9b6 	bl	8003540 <HAL_PWREx_GetVoltageRange>
 80041d4:	6178      	str	r0, [r7, #20]
 80041d6:	e014      	b.n	8004202 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041d8:	4b25      	ldr	r3, [pc, #148]	; (8004270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041dc:	4a24      	ldr	r2, [pc, #144]	; (8004270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e2:	6593      	str	r3, [r2, #88]	; 0x58
 80041e4:	4b22      	ldr	r3, [pc, #136]	; (8004270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041f0:	f7ff f9a6 	bl	8003540 <HAL_PWREx_GetVoltageRange>
 80041f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041f6:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fa:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004200:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004208:	d10b      	bne.n	8004222 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	d919      	bls.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2ba0      	cmp	r3, #160	; 0xa0
 8004214:	d902      	bls.n	800421c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004216:	2302      	movs	r3, #2
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	e013      	b.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800421c:	2301      	movs	r3, #1
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	e010      	b.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b80      	cmp	r3, #128	; 0x80
 8004226:	d902      	bls.n	800422e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004228:	2303      	movs	r3, #3
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	e00a      	b.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b80      	cmp	r3, #128	; 0x80
 8004232:	d102      	bne.n	800423a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004234:	2302      	movs	r3, #2
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	e004      	b.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b70      	cmp	r3, #112	; 0x70
 800423e:	d101      	bne.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004240:	2301      	movs	r3, #1
 8004242:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f023 0207 	bic.w	r2, r3, #7
 800424c:	4909      	ldr	r1, [pc, #36]	; (8004274 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	429a      	cmp	r2, r3
 8004260:	d001      	beq.n	8004266 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000
 8004274:	40022000 	.word	0x40022000

08004278 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004280:	2300      	movs	r3, #0
 8004282:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004284:	2300      	movs	r3, #0
 8004286:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004290:	2b00      	cmp	r3, #0
 8004292:	d031      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800429c:	d01a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800429e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042a2:	d814      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d009      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ac:	d10f      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80042ae:	4b5d      	ldr	r3, [pc, #372]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	4a5c      	ldr	r2, [pc, #368]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042ba:	e00c      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f9de 	bl	8004684 <RCCEx_PLLSAI1_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042cc:	e003      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	74fb      	strb	r3, [r7, #19]
      break;
 80042d2:	e000      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80042d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d6:	7cfb      	ldrb	r3, [r7, #19]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10b      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042dc:	4b51      	ldr	r3, [pc, #324]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	494e      	ldr	r1, [pc, #312]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042f2:	e001      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	7cfb      	ldrb	r3, [r7, #19]
 80042f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 809e 	beq.w	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004306:	2300      	movs	r3, #0
 8004308:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800430a:	4b46      	ldr	r3, [pc, #280]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800431a:	2300      	movs	r3, #0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004320:	4b40      	ldr	r3, [pc, #256]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004324:	4a3f      	ldr	r2, [pc, #252]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432a:	6593      	str	r3, [r2, #88]	; 0x58
 800432c:	4b3d      	ldr	r3, [pc, #244]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004338:	2301      	movs	r3, #1
 800433a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800433c:	4b3a      	ldr	r3, [pc, #232]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a39      	ldr	r2, [pc, #228]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004346:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004348:	f7fd fc22 	bl	8001b90 <HAL_GetTick>
 800434c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800434e:	e009      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004350:	f7fd fc1e 	bl	8001b90 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d902      	bls.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	74fb      	strb	r3, [r7, #19]
        break;
 8004362:	e005      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004364:	4b30      	ldr	r3, [pc, #192]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0ef      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d15a      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004376:	4b2b      	ldr	r3, [pc, #172]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004380:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01e      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	429a      	cmp	r2, r3
 8004390:	d019      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004392:	4b24      	ldr	r3, [pc, #144]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800439e:	4b21      	ldr	r3, [pc, #132]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b4:	4a1b      	ldr	r2, [pc, #108]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043be:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d016      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd fbde 	bl	8001b90 <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d6:	e00b      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f7fd fbda 	bl	8001b90 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d902      	bls.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	74fb      	strb	r3, [r7, #19]
            break;
 80043ee:	e006      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043f0:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0ec      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80043fe:	7cfb      	ldrb	r3, [r7, #19]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004404:	4b07      	ldr	r3, [pc, #28]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004412:	4904      	ldr	r1, [pc, #16]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800441a:	e009      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800441c:	7cfb      	ldrb	r3, [r7, #19]
 800441e:	74bb      	strb	r3, [r7, #18]
 8004420:	e006      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004422:	bf00      	nop
 8004424:	40021000 	.word	0x40021000
 8004428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442c:	7cfb      	ldrb	r3, [r7, #19]
 800442e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004430:	7c7b      	ldrb	r3, [r7, #17]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004436:	4b8a      	ldr	r3, [pc, #552]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	4a89      	ldr	r2, [pc, #548]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800443c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004440:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800444e:	4b84      	ldr	r3, [pc, #528]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f023 0203 	bic.w	r2, r3, #3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	4980      	ldr	r1, [pc, #512]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004470:	4b7b      	ldr	r3, [pc, #492]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f023 020c 	bic.w	r2, r3, #12
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	4978      	ldr	r1, [pc, #480]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004492:	4b73      	ldr	r3, [pc, #460]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004498:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	496f      	ldr	r1, [pc, #444]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044b4:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ba:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c2:	4967      	ldr	r1, [pc, #412]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044d6:	4b62      	ldr	r3, [pc, #392]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	495e      	ldr	r1, [pc, #376]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044f8:	4b59      	ldr	r3, [pc, #356]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	4956      	ldr	r1, [pc, #344]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800451a:	4b51      	ldr	r3, [pc, #324]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800451c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	494d      	ldr	r1, [pc, #308]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d028      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800453c:	4b48      	ldr	r3, [pc, #288]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004542:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	4945      	ldr	r1, [pc, #276]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800455a:	d106      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800455c:	4b40      	ldr	r3, [pc, #256]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a3f      	ldr	r2, [pc, #252]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004566:	60d3      	str	r3, [r2, #12]
 8004568:	e011      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004572:	d10c      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3304      	adds	r3, #4
 8004578:	2101      	movs	r1, #1
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f882 	bl	8004684 <RCCEx_PLLSAI1_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800458a:	7cfb      	ldrb	r3, [r7, #19]
 800458c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d028      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800459a:	4b31      	ldr	r3, [pc, #196]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a8:	492d      	ldr	r1, [pc, #180]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045b8:	d106      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045ba:	4b29      	ldr	r3, [pc, #164]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	4a28      	ldr	r2, [pc, #160]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045c4:	60d3      	str	r3, [r2, #12]
 80045c6:	e011      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045d0:	d10c      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3304      	adds	r3, #4
 80045d6:	2101      	movs	r1, #1
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 f853 	bl	8004684 <RCCEx_PLLSAI1_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045e2:	7cfb      	ldrb	r3, [r7, #19]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80045e8:	7cfb      	ldrb	r3, [r7, #19]
 80045ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01c      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045f8:	4b19      	ldr	r3, [pc, #100]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004606:	4916      	ldr	r1, [pc, #88]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004616:	d10c      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	2102      	movs	r1, #2
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f830 	bl	8004684 <RCCEx_PLLSAI1_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800462e:	7cfb      	ldrb	r3, [r7, #19]
 8004630:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800463e:	4b08      	ldr	r3, [pc, #32]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004644:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464c:	4904      	ldr	r1, [pc, #16]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004654:	7cbb      	ldrb	r3, [r7, #18]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000

08004664 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a04      	ldr	r2, [pc, #16]	; (8004680 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800466e:	f043 0304 	orr.w	r3, r3, #4
 8004672:	6013      	str	r3, [r2, #0]
}
 8004674:	bf00      	nop
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000

08004684 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004692:	4b74      	ldr	r3, [pc, #464]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d018      	beq.n	80046d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800469e:	4b71      	ldr	r3, [pc, #452]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0203 	and.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d10d      	bne.n	80046ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
       ||
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80046b6:	4b6b      	ldr	r3, [pc, #428]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	091b      	lsrs	r3, r3, #4
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
       ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d047      	beq.n	800475a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
 80046ce:	e044      	b.n	800475a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d018      	beq.n	800470a <RCCEx_PLLSAI1_Config+0x86>
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d825      	bhi.n	8004728 <RCCEx_PLLSAI1_Config+0xa4>
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d002      	beq.n	80046e6 <RCCEx_PLLSAI1_Config+0x62>
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d009      	beq.n	80046f8 <RCCEx_PLLSAI1_Config+0x74>
 80046e4:	e020      	b.n	8004728 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046e6:	4b5f      	ldr	r3, [pc, #380]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d11d      	bne.n	800472e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046f6:	e01a      	b.n	800472e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046f8:	4b5a      	ldr	r3, [pc, #360]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d116      	bne.n	8004732 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004708:	e013      	b.n	8004732 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800470a:	4b56      	ldr	r3, [pc, #344]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004716:	4b53      	ldr	r3, [pc, #332]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004726:	e006      	b.n	8004736 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
      break;
 800472c:	e004      	b.n	8004738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004736:	bf00      	nop
    }

    if(status == HAL_OK)
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10d      	bne.n	800475a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800473e:	4b49      	ldr	r3, [pc, #292]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6819      	ldr	r1, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	3b01      	subs	r3, #1
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	430b      	orrs	r3, r1
 8004754:	4943      	ldr	r1, [pc, #268]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004756:	4313      	orrs	r3, r2
 8004758:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d17c      	bne.n	800485a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004760:	4b40      	ldr	r3, [pc, #256]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a3f      	ldr	r2, [pc, #252]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800476a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476c:	f7fd fa10 	bl	8001b90 <HAL_GetTick>
 8004770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004772:	e009      	b.n	8004788 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004774:	f7fd fa0c 	bl	8001b90 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d902      	bls.n	8004788 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	73fb      	strb	r3, [r7, #15]
        break;
 8004786:	e005      	b.n	8004794 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004788:	4b36      	ldr	r3, [pc, #216]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1ef      	bne.n	8004774 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d15f      	bne.n	800485a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d110      	bne.n	80047c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047a0:	4b30      	ldr	r3, [pc, #192]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80047a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6892      	ldr	r2, [r2, #8]
 80047b0:	0211      	lsls	r1, r2, #8
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68d2      	ldr	r2, [r2, #12]
 80047b6:	06d2      	lsls	r2, r2, #27
 80047b8:	430a      	orrs	r2, r1
 80047ba:	492a      	ldr	r1, [pc, #168]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	610b      	str	r3, [r1, #16]
 80047c0:	e027      	b.n	8004812 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d112      	bne.n	80047ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047c8:	4b26      	ldr	r3, [pc, #152]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80047d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6892      	ldr	r2, [r2, #8]
 80047d8:	0211      	lsls	r1, r2, #8
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6912      	ldr	r2, [r2, #16]
 80047de:	0852      	lsrs	r2, r2, #1
 80047e0:	3a01      	subs	r2, #1
 80047e2:	0552      	lsls	r2, r2, #21
 80047e4:	430a      	orrs	r2, r1
 80047e6:	491f      	ldr	r1, [pc, #124]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	610b      	str	r3, [r1, #16]
 80047ec:	e011      	b.n	8004812 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ee:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6892      	ldr	r2, [r2, #8]
 80047fe:	0211      	lsls	r1, r2, #8
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6952      	ldr	r2, [r2, #20]
 8004804:	0852      	lsrs	r2, r2, #1
 8004806:	3a01      	subs	r2, #1
 8004808:	0652      	lsls	r2, r2, #25
 800480a:	430a      	orrs	r2, r1
 800480c:	4915      	ldr	r1, [pc, #84]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800480e:	4313      	orrs	r3, r2
 8004810:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a13      	ldr	r2, [pc, #76]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004818:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800481c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481e:	f7fd f9b7 	bl	8001b90 <HAL_GetTick>
 8004822:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004824:	e009      	b.n	800483a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004826:	f7fd f9b3 	bl	8001b90 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d902      	bls.n	800483a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	73fb      	strb	r3, [r7, #15]
          break;
 8004838:	e005      	b.n	8004846 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0ef      	beq.n	8004826 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	4903      	ldr	r1, [pc, #12]	; (8004864 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004856:	4313      	orrs	r3, r2
 8004858:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000

08004868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e049      	b.n	800490e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fc ff40 	bl	8001714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f000 fbf4 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d001      	beq.n	8004930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e03b      	b.n	80049a8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a19      	ldr	r2, [pc, #100]	; (80049b4 <HAL_TIM_Base_Start_IT+0x9c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d009      	beq.n	8004966 <HAL_TIM_Base_Start_IT+0x4e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495a:	d004      	beq.n	8004966 <HAL_TIM_Base_Start_IT+0x4e>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d115      	bne.n	8004992 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	4b13      	ldr	r3, [pc, #76]	; (80049bc <HAL_TIM_Base_Start_IT+0xa4>)
 800496e:	4013      	ands	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b06      	cmp	r3, #6
 8004976:	d015      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x8c>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800497e:	d011      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004990:	e008      	b.n	80049a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e000      	b.n	80049a6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40014000 	.word	0x40014000
 80049bc:	00010007 	.word	0x00010007

080049c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e049      	b.n	8004a66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d106      	bne.n	80049ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f841 	bl	8004a6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f000 fb48 	bl	8005094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d020      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01b      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f06f 0202 	mvn.w	r2, #2
 8004ab6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fac2 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004ad2:	e005      	b.n	8004ae0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fab4 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fac5 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d020      	beq.n	8004b32 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01b      	beq.n	8004b32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f06f 0204 	mvn.w	r2, #4
 8004b02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fa9c 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004b1e:	e005      	b.n	8004b2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fa8e 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fa9f 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d020      	beq.n	8004b7e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d01b      	beq.n	8004b7e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f06f 0208 	mvn.w	r2, #8
 8004b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2204      	movs	r2, #4
 8004b54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fa76 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004b6a:	e005      	b.n	8004b78 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fa68 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fa79 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d020      	beq.n	8004bca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d01b      	beq.n	8004bca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f06f 0210 	mvn.w	r2, #16
 8004b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fa50 	bl	8005056 <HAL_TIM_IC_CaptureCallback>
 8004bb6:	e005      	b.n	8004bc4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fa42 	bl	8005042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fa53 	bl	800506a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00c      	beq.n	8004bee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f06f 0201 	mvn.w	r2, #1
 8004be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fc f9b5 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00c      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 ff43 	bl	8005a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00c      	beq.n	8004c36 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 ff3b 	bl	8005aac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00c      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fa12 	bl	800507e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00c      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f06f 0220 	mvn.w	r2, #32
 8004c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 ff03 	bl	8005a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c7e:	bf00      	nop
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e0ff      	b.n	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b14      	cmp	r3, #20
 8004cb2:	f200 80f0 	bhi.w	8004e96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004cb6:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004d11 	.word	0x08004d11
 8004cc0:	08004e97 	.word	0x08004e97
 8004cc4:	08004e97 	.word	0x08004e97
 8004cc8:	08004e97 	.word	0x08004e97
 8004ccc:	08004d51 	.word	0x08004d51
 8004cd0:	08004e97 	.word	0x08004e97
 8004cd4:	08004e97 	.word	0x08004e97
 8004cd8:	08004e97 	.word	0x08004e97
 8004cdc:	08004d93 	.word	0x08004d93
 8004ce0:	08004e97 	.word	0x08004e97
 8004ce4:	08004e97 	.word	0x08004e97
 8004ce8:	08004e97 	.word	0x08004e97
 8004cec:	08004dd3 	.word	0x08004dd3
 8004cf0:	08004e97 	.word	0x08004e97
 8004cf4:	08004e97 	.word	0x08004e97
 8004cf8:	08004e97 	.word	0x08004e97
 8004cfc:	08004e15 	.word	0x08004e15
 8004d00:	08004e97 	.word	0x08004e97
 8004d04:	08004e97 	.word	0x08004e97
 8004d08:	08004e97 	.word	0x08004e97
 8004d0c:	08004e55 	.word	0x08004e55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fa20 	bl	800515c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0208 	orr.w	r2, r2, #8
 8004d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0204 	bic.w	r2, r2, #4
 8004d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6999      	ldr	r1, [r3, #24]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	619a      	str	r2, [r3, #24]
      break;
 8004d4e:	e0a5      	b.n	8004e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fa7c 	bl	8005254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6999      	ldr	r1, [r3, #24]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	021a      	lsls	r2, r3, #8
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	619a      	str	r2, [r3, #24]
      break;
 8004d90:	e084      	b.n	8004e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fad5 	bl	8005348 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0208 	orr.w	r2, r2, #8
 8004dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0204 	bic.w	r2, r2, #4
 8004dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69d9      	ldr	r1, [r3, #28]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	61da      	str	r2, [r3, #28]
      break;
 8004dd0:	e064      	b.n	8004e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fb2d 	bl	8005438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69d9      	ldr	r1, [r3, #28]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	021a      	lsls	r2, r3, #8
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	61da      	str	r2, [r3, #28]
      break;
 8004e12:	e043      	b.n	8004e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fb6a 	bl	80054f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0208 	orr.w	r2, r2, #8
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0204 	bic.w	r2, r2, #4
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e52:	e023      	b.n	8004e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fba2 	bl	80055a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	021a      	lsls	r2, r3, #8
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e94:	e002      	b.n	8004e9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop

08004eb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIM_ConfigClockSource+0x1c>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e0b6      	b.n	800503a <HAL_TIM_ConfigClockSource+0x18a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f08:	d03e      	beq.n	8004f88 <HAL_TIM_ConfigClockSource+0xd8>
 8004f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0e:	f200 8087 	bhi.w	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f16:	f000 8086 	beq.w	8005026 <HAL_TIM_ConfigClockSource+0x176>
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	d87f      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f20:	2b70      	cmp	r3, #112	; 0x70
 8004f22:	d01a      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0xaa>
 8004f24:	2b70      	cmp	r3, #112	; 0x70
 8004f26:	d87b      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f28:	2b60      	cmp	r3, #96	; 0x60
 8004f2a:	d050      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x11e>
 8004f2c:	2b60      	cmp	r3, #96	; 0x60
 8004f2e:	d877      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f30:	2b50      	cmp	r3, #80	; 0x50
 8004f32:	d03c      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0xfe>
 8004f34:	2b50      	cmp	r3, #80	; 0x50
 8004f36:	d873      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d058      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x13e>
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d86f      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f40:	2b30      	cmp	r3, #48	; 0x30
 8004f42:	d064      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x15e>
 8004f44:	2b30      	cmp	r3, #48	; 0x30
 8004f46:	d86b      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d060      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x15e>
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d867      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d05c      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x15e>
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d05a      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x15e>
 8004f58:	e062      	b.n	8005020 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f6a:	f000 fbef 	bl	800574c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	609a      	str	r2, [r3, #8]
      break;
 8004f86:	e04f      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f98:	f000 fbd8 	bl	800574c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004faa:	609a      	str	r2, [r3, #8]
      break;
 8004fac:	e03c      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f000 fb4c 	bl	8005658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2150      	movs	r1, #80	; 0x50
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fba5 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8004fcc:	e02c      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f000 fb6b 	bl	80056b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2160      	movs	r1, #96	; 0x60
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fb95 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 8004fec:	e01c      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 fb2c 	bl	8005658 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2140      	movs	r1, #64	; 0x40
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fb85 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 800500c:	e00c      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4619      	mov	r1, r3
 8005018:	4610      	mov	r0, r2
 800501a:	f000 fb7c 	bl	8005716 <TIM_ITRx_SetConfig>
      break;
 800501e:	e003      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
      break;
 8005024:	e000      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a2a      	ldr	r2, [pc, #168]	; (8005150 <TIM_Base_SetConfig+0xbc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d003      	beq.n	80050b4 <TIM_Base_SetConfig+0x20>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b2:	d108      	bne.n	80050c6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a21      	ldr	r2, [pc, #132]	; (8005150 <TIM_Base_SetConfig+0xbc>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00b      	beq.n	80050e6 <TIM_Base_SetConfig+0x52>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d4:	d007      	beq.n	80050e6 <TIM_Base_SetConfig+0x52>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <TIM_Base_SetConfig+0xc0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_Base_SetConfig+0x52>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1d      	ldr	r2, [pc, #116]	; (8005158 <TIM_Base_SetConfig+0xc4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d108      	bne.n	80050f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a0c      	ldr	r2, [pc, #48]	; (8005150 <TIM_Base_SetConfig+0xbc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d007      	beq.n	8005134 <TIM_Base_SetConfig+0xa0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a0b      	ldr	r2, [pc, #44]	; (8005154 <TIM_Base_SetConfig+0xc0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_Base_SetConfig+0xa0>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <TIM_Base_SetConfig+0xc4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d103      	bne.n	800513c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	615a      	str	r2, [r3, #20]
}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40014000 	.word	0x40014000
 8005158:	40014400 	.word	0x40014400

0800515c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	f023 0201 	bic.w	r2, r3, #1
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800518a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0303 	bic.w	r3, r3, #3
 8005196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f023 0302 	bic.w	r3, r3, #2
 80051a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a24      	ldr	r2, [pc, #144]	; (8005248 <TIM_OC1_SetConfig+0xec>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d007      	beq.n	80051cc <TIM_OC1_SetConfig+0x70>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a23      	ldr	r2, [pc, #140]	; (800524c <TIM_OC1_SetConfig+0xf0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_OC1_SetConfig+0x70>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a22      	ldr	r2, [pc, #136]	; (8005250 <TIM_OC1_SetConfig+0xf4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d10c      	bne.n	80051e6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0308 	bic.w	r3, r3, #8
 80051d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f023 0304 	bic.w	r3, r3, #4
 80051e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a17      	ldr	r2, [pc, #92]	; (8005248 <TIM_OC1_SetConfig+0xec>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d007      	beq.n	80051fe <TIM_OC1_SetConfig+0xa2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a16      	ldr	r2, [pc, #88]	; (800524c <TIM_OC1_SetConfig+0xf0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_OC1_SetConfig+0xa2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a15      	ldr	r2, [pc, #84]	; (8005250 <TIM_OC1_SetConfig+0xf4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d111      	bne.n	8005222 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800520c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	621a      	str	r2, [r3, #32]
}
 800523c:	bf00      	nop
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40014000 	.word	0x40014000
 8005250:	40014400 	.word	0x40014400

08005254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	f023 0210 	bic.w	r2, r3, #16
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0320 	bic.w	r3, r3, #32
 80052a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a22      	ldr	r2, [pc, #136]	; (800533c <TIM_OC2_SetConfig+0xe8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d10d      	bne.n	80052d4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a19      	ldr	r2, [pc, #100]	; (800533c <TIM_OC2_SetConfig+0xe8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d007      	beq.n	80052ec <TIM_OC2_SetConfig+0x98>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a18      	ldr	r2, [pc, #96]	; (8005340 <TIM_OC2_SetConfig+0xec>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_OC2_SetConfig+0x98>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a17      	ldr	r2, [pc, #92]	; (8005344 <TIM_OC2_SetConfig+0xf0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d113      	bne.n	8005314 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40014000 	.word	0x40014000
 8005344:	40014400 	.word	0x40014400

08005348 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a21      	ldr	r2, [pc, #132]	; (800542c <TIM_OC3_SetConfig+0xe4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d10d      	bne.n	80053c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a18      	ldr	r2, [pc, #96]	; (800542c <TIM_OC3_SetConfig+0xe4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <TIM_OC3_SetConfig+0x96>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a17      	ldr	r2, [pc, #92]	; (8005430 <TIM_OC3_SetConfig+0xe8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_OC3_SetConfig+0x96>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a16      	ldr	r2, [pc, #88]	; (8005434 <TIM_OC3_SetConfig+0xec>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d113      	bne.n	8005406 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	621a      	str	r2, [r3, #32]
}
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40014000 	.word	0x40014000
 8005434:	40014400 	.word	0x40014400

08005438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	031b      	lsls	r3, r3, #12
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a14      	ldr	r2, [pc, #80]	; (80054e8 <TIM_OC4_SetConfig+0xb0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_OC4_SetConfig+0x74>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a13      	ldr	r2, [pc, #76]	; (80054ec <TIM_OC4_SetConfig+0xb4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_OC4_SetConfig+0x74>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a12      	ldr	r2, [pc, #72]	; (80054f0 <TIM_OC4_SetConfig+0xb8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d109      	bne.n	80054c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	019b      	lsls	r3, r3, #6
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40014000 	.word	0x40014000
 80054f0:	40014400 	.word	0x40014400

080054f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005538:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	041b      	lsls	r3, r3, #16
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	4313      	orrs	r3, r2
 8005544:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a13      	ldr	r2, [pc, #76]	; (8005598 <TIM_OC5_SetConfig+0xa4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d007      	beq.n	800555e <TIM_OC5_SetConfig+0x6a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a12      	ldr	r2, [pc, #72]	; (800559c <TIM_OC5_SetConfig+0xa8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d003      	beq.n	800555e <TIM_OC5_SetConfig+0x6a>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a11      	ldr	r2, [pc, #68]	; (80055a0 <TIM_OC5_SetConfig+0xac>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d109      	bne.n	8005572 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005564:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	021b      	lsls	r3, r3, #8
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	621a      	str	r2, [r3, #32]
}
 800558c:	bf00      	nop
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	40012c00 	.word	0x40012c00
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400

080055a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	051b      	lsls	r3, r3, #20
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a14      	ldr	r2, [pc, #80]	; (800564c <TIM_OC6_SetConfig+0xa8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <TIM_OC6_SetConfig+0x6c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a13      	ldr	r2, [pc, #76]	; (8005650 <TIM_OC6_SetConfig+0xac>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_OC6_SetConfig+0x6c>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a12      	ldr	r2, [pc, #72]	; (8005654 <TIM_OC6_SetConfig+0xb0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d109      	bne.n	8005624 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005616:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	029b      	lsls	r3, r3, #10
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400

08005658 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0201 	bic.w	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f023 030a 	bic.w	r3, r3, #10
 8005694:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f023 0210 	bic.w	r2, r3, #16
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	031b      	lsls	r3, r3, #12
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	f043 0307 	orr.w	r3, r3, #7
 8005738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	021a      	lsls	r2, r3, #8
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	431a      	orrs	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4313      	orrs	r3, r2
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	609a      	str	r2, [r3, #8]
}
 8005780:	bf00      	nop
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d109      	bne.n	80057b0 <HAL_TIMEx_PWMN_Start+0x24>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	bf14      	ite	ne
 80057a8:	2301      	movne	r3, #1
 80057aa:	2300      	moveq	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	e022      	b.n	80057f6 <HAL_TIMEx_PWMN_Start+0x6a>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d109      	bne.n	80057ca <HAL_TIMEx_PWMN_Start+0x3e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	bf14      	ite	ne
 80057c2:	2301      	movne	r3, #1
 80057c4:	2300      	moveq	r3, #0
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	e015      	b.n	80057f6 <HAL_TIMEx_PWMN_Start+0x6a>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d109      	bne.n	80057e4 <HAL_TIMEx_PWMN_Start+0x58>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	2b01      	cmp	r3, #1
 80057da:	bf14      	ite	ne
 80057dc:	2301      	movne	r3, #1
 80057de:	2300      	moveq	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	e008      	b.n	80057f6 <HAL_TIMEx_PWMN_Start+0x6a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e05a      	b.n	80058b4 <HAL_TIMEx_PWMN_Start+0x128>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <HAL_TIMEx_PWMN_Start+0x82>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800580c:	e013      	b.n	8005836 <HAL_TIMEx_PWMN_Start+0xaa>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b04      	cmp	r3, #4
 8005812:	d104      	bne.n	800581e <HAL_TIMEx_PWMN_Start+0x92>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800581c:	e00b      	b.n	8005836 <HAL_TIMEx_PWMN_Start+0xaa>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d104      	bne.n	800582e <HAL_TIMEx_PWMN_Start+0xa2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800582c:	e003      	b.n	8005836 <HAL_TIMEx_PWMN_Start+0xaa>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2204      	movs	r2, #4
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f000 f93e 	bl	8005ac0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005852:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a18      	ldr	r2, [pc, #96]	; (80058bc <HAL_TIMEx_PWMN_Start+0x130>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d009      	beq.n	8005872 <HAL_TIMEx_PWMN_Start+0xe6>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005866:	d004      	beq.n	8005872 <HAL_TIMEx_PWMN_Start+0xe6>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a14      	ldr	r2, [pc, #80]	; (80058c0 <HAL_TIMEx_PWMN_Start+0x134>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d115      	bne.n	800589e <HAL_TIMEx_PWMN_Start+0x112>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	4b12      	ldr	r3, [pc, #72]	; (80058c4 <HAL_TIMEx_PWMN_Start+0x138>)
 800587a:	4013      	ands	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b06      	cmp	r3, #6
 8005882:	d015      	beq.n	80058b0 <HAL_TIMEx_PWMN_Start+0x124>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588a:	d011      	beq.n	80058b0 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f042 0201 	orr.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589c:	e008      	b.n	80058b0 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0201 	orr.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	e000      	b.n	80058b2 <HAL_TIMEx_PWMN_Start+0x126>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40012c00 	.word	0x40012c00
 80058c0:	40014000 	.word	0x40014000
 80058c4:	00010007 	.word	0x00010007

080058c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058dc:	2302      	movs	r3, #2
 80058de:	e04f      	b.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a21      	ldr	r2, [pc, #132]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d108      	bne.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005910:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a14      	ldr	r2, [pc, #80]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d009      	beq.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005948:	d004      	beq.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a10      	ldr	r2, [pc, #64]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d10c      	bne.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	4313      	orrs	r3, r2
 8005964:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40014000 	.word	0x40014000

08005994 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e060      	b.n	8005a72 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	041b      	lsls	r3, r3, #16
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a14      	ldr	r2, [pc, #80]	; (8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d115      	bne.n	8005a60 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	051b      	lsls	r3, r3, #20
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40012c00 	.word	0x40012c00

08005a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a1a      	ldr	r2, [r3, #32]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	401a      	ands	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1a      	ldr	r2, [r3, #32]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	fa01 f303 	lsl.w	r3, r1, r3
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	621a      	str	r2, [r3, #32]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e040      	b.n	8005b9e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fb fe6b 	bl	8001808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2224      	movs	r2, #36	; 0x24
 8005b36:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0201 	bic.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fba7 	bl	80062a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f978 	bl	8005e4c <UART_SetConfig>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e01b      	b.n	8005b9e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0201 	orr.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fc26 	bl	80063e8 <UART_CheckIdleState>
 8005b9c:	4603      	mov	r3, r0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b08a      	sub	sp, #40	; 0x28
 8005baa:	af02      	add	r7, sp, #8
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	603b      	str	r3, [r7, #0]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d178      	bne.n	8005cb0 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <HAL_UART_Transmit+0x24>
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e071      	b.n	8005cb2 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2221      	movs	r2, #33	; 0x21
 8005bda:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bdc:	f7fb ffd8 	bl	8001b90 <HAL_GetTick>
 8005be0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	88fa      	ldrh	r2, [r7, #6]
 8005be6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	88fa      	ldrh	r2, [r7, #6]
 8005bee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfa:	d108      	bne.n	8005c0e <HAL_UART_Transmit+0x68>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	e003      	b.n	8005c16 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c16:	e030      	b.n	8005c7a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2180      	movs	r1, #128	; 0x80
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 fc88 	bl	8006538 <UART_WaitOnFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e03c      	b.n	8005cb2 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	881a      	ldrh	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c4a:	b292      	uxth	r2, r2
 8005c4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	3302      	adds	r3, #2
 8005c52:	61bb      	str	r3, [r7, #24]
 8005c54:	e008      	b.n	8005c68 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	b292      	uxth	r2, r2
 8005c60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	3301      	adds	r3, #1
 8005c66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1c8      	bne.n	8005c18 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2140      	movs	r1, #64	; 0x40
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 fc51 	bl	8006538 <UART_WaitOnFlagUntilTimeout>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e005      	b.n	8005cb2 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	e000      	b.n	8005cb2 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005cb0:	2302      	movs	r3, #2
  }
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3720      	adds	r7, #32
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b08a      	sub	sp, #40	; 0x28
 8005cbe:	af02      	add	r7, sp, #8
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	603b      	str	r3, [r7, #0]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	f040 80b6 	bne.w	8005e42 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_UART_Receive+0x28>
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0ae      	b.n	8005e44 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2222      	movs	r2, #34	; 0x22
 8005cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cfc:	f7fb ff48 	bl	8001b90 <HAL_GetTick>
 8005d00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	88fa      	ldrh	r2, [r7, #6]
 8005d06:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	88fa      	ldrh	r2, [r7, #6]
 8005d0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1a:	d10e      	bne.n	8005d3a <HAL_UART_Receive+0x80>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <HAL_UART_Receive+0x76>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d2e:	e02d      	b.n	8005d8c <HAL_UART_Receive+0xd2>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	22ff      	movs	r2, #255	; 0xff
 8005d34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d38:	e028      	b.n	8005d8c <HAL_UART_Receive+0xd2>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10d      	bne.n	8005d5e <HAL_UART_Receive+0xa4>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d104      	bne.n	8005d54 <HAL_UART_Receive+0x9a>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	22ff      	movs	r2, #255	; 0xff
 8005d4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d52:	e01b      	b.n	8005d8c <HAL_UART_Receive+0xd2>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	227f      	movs	r2, #127	; 0x7f
 8005d58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d5c:	e016      	b.n	8005d8c <HAL_UART_Receive+0xd2>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d66:	d10d      	bne.n	8005d84 <HAL_UART_Receive+0xca>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d104      	bne.n	8005d7a <HAL_UART_Receive+0xc0>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	227f      	movs	r2, #127	; 0x7f
 8005d74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d78:	e008      	b.n	8005d8c <HAL_UART_Receive+0xd2>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	223f      	movs	r2, #63	; 0x3f
 8005d7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d82:	e003      	b.n	8005d8c <HAL_UART_Receive+0xd2>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d92:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9c:	d108      	bne.n	8005db0 <HAL_UART_Receive+0xf6>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e003      	b.n	8005db8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005db8:	e037      	b.n	8005e2a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2120      	movs	r1, #32
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 fbb7 	bl	8006538 <UART_WaitOnFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e033      	b.n	8005e44 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10c      	bne.n	8005dfc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	8a7b      	ldrh	r3, [r7, #18]
 8005dec:	4013      	ands	r3, r2
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	3302      	adds	r3, #2
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	e00d      	b.n	8005e18 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	8a7b      	ldrh	r3, [r7, #18]
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	3301      	adds	r3, #1
 8005e16:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1c1      	bne.n	8005dba <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e000      	b.n	8005e44 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005e42:	2302      	movs	r3, #2
  }
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e50:	b08a      	sub	sp, #40	; 0x28
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4bb4      	ldr	r3, [pc, #720]	; (800614c <UART_SetConfig+0x300>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	6812      	ldr	r2, [r2, #0]
 8005e82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e84:	430b      	orrs	r3, r1
 8005e86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4aa9      	ldr	r2, [pc, #676]	; (8006150 <UART_SetConfig+0x304>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4aa0      	ldr	r2, [pc, #640]	; (8006154 <UART_SetConfig+0x308>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d126      	bne.n	8005f24 <UART_SetConfig+0xd8>
 8005ed6:	4ba0      	ldr	r3, [pc, #640]	; (8006158 <UART_SetConfig+0x30c>)
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005edc:	f003 0303 	and.w	r3, r3, #3
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d81b      	bhi.n	8005f1c <UART_SetConfig+0xd0>
 8005ee4:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <UART_SetConfig+0xa0>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005efd 	.word	0x08005efd
 8005ef0:	08005f0d 	.word	0x08005f0d
 8005ef4:	08005f05 	.word	0x08005f05
 8005ef8:	08005f15 	.word	0x08005f15
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f02:	e080      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005f04:	2302      	movs	r3, #2
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0a:	e07c      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f12:	e078      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005f14:	2308      	movs	r3, #8
 8005f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1a:	e074      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f22:	e070      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a8c      	ldr	r2, [pc, #560]	; (800615c <UART_SetConfig+0x310>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d138      	bne.n	8005fa0 <UART_SetConfig+0x154>
 8005f2e:	4b8a      	ldr	r3, [pc, #552]	; (8006158 <UART_SetConfig+0x30c>)
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f34:	f003 030c 	and.w	r3, r3, #12
 8005f38:	2b0c      	cmp	r3, #12
 8005f3a:	d82d      	bhi.n	8005f98 <UART_SetConfig+0x14c>
 8005f3c:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <UART_SetConfig+0xf8>)
 8005f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f42:	bf00      	nop
 8005f44:	08005f79 	.word	0x08005f79
 8005f48:	08005f99 	.word	0x08005f99
 8005f4c:	08005f99 	.word	0x08005f99
 8005f50:	08005f99 	.word	0x08005f99
 8005f54:	08005f89 	.word	0x08005f89
 8005f58:	08005f99 	.word	0x08005f99
 8005f5c:	08005f99 	.word	0x08005f99
 8005f60:	08005f99 	.word	0x08005f99
 8005f64:	08005f81 	.word	0x08005f81
 8005f68:	08005f99 	.word	0x08005f99
 8005f6c:	08005f99 	.word	0x08005f99
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005f91 	.word	0x08005f91
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7e:	e042      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005f80:	2302      	movs	r3, #2
 8005f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f86:	e03e      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005f88:	2304      	movs	r3, #4
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8e:	e03a      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005f90:	2308      	movs	r3, #8
 8005f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f96:	e036      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005f98:	2310      	movs	r3, #16
 8005f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f9e:	e032      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a6a      	ldr	r2, [pc, #424]	; (8006150 <UART_SetConfig+0x304>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d12a      	bne.n	8006000 <UART_SetConfig+0x1b4>
 8005faa:	4b6b      	ldr	r3, [pc, #428]	; (8006158 <UART_SetConfig+0x30c>)
 8005fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fb8:	d01a      	beq.n	8005ff0 <UART_SetConfig+0x1a4>
 8005fba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fbe:	d81b      	bhi.n	8005ff8 <UART_SetConfig+0x1ac>
 8005fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fc4:	d00c      	beq.n	8005fe0 <UART_SetConfig+0x194>
 8005fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fca:	d815      	bhi.n	8005ff8 <UART_SetConfig+0x1ac>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <UART_SetConfig+0x18c>
 8005fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd4:	d008      	beq.n	8005fe8 <UART_SetConfig+0x19c>
 8005fd6:	e00f      	b.n	8005ff8 <UART_SetConfig+0x1ac>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fde:	e012      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe6:	e00e      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005fe8:	2304      	movs	r3, #4
 8005fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fee:	e00a      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005ff0:	2308      	movs	r3, #8
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff6:	e006      	b.n	8006006 <UART_SetConfig+0x1ba>
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffe:	e002      	b.n	8006006 <UART_SetConfig+0x1ba>
 8006000:	2310      	movs	r3, #16
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a51      	ldr	r2, [pc, #324]	; (8006150 <UART_SetConfig+0x304>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d17a      	bne.n	8006106 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006010:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006014:	2b08      	cmp	r3, #8
 8006016:	d824      	bhi.n	8006062 <UART_SetConfig+0x216>
 8006018:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <UART_SetConfig+0x1d4>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	08006045 	.word	0x08006045
 8006024:	08006063 	.word	0x08006063
 8006028:	0800604d 	.word	0x0800604d
 800602c:	08006063 	.word	0x08006063
 8006030:	08006053 	.word	0x08006053
 8006034:	08006063 	.word	0x08006063
 8006038:	08006063 	.word	0x08006063
 800603c:	08006063 	.word	0x08006063
 8006040:	0800605b 	.word	0x0800605b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006044:	f7fe f88c 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8006048:	61f8      	str	r0, [r7, #28]
        break;
 800604a:	e010      	b.n	800606e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800604c:	4b44      	ldr	r3, [pc, #272]	; (8006160 <UART_SetConfig+0x314>)
 800604e:	61fb      	str	r3, [r7, #28]
        break;
 8006050:	e00d      	b.n	800606e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006052:	f7fd ffed 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8006056:	61f8      	str	r0, [r7, #28]
        break;
 8006058:	e009      	b.n	800606e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800605a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800605e:	61fb      	str	r3, [r7, #28]
        break;
 8006060:	e005      	b.n	800606e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800606c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 8107 	beq.w	8006284 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	4613      	mov	r3, r2
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	4413      	add	r3, r2
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	429a      	cmp	r2, r3
 8006084:	d305      	bcc.n	8006092 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	429a      	cmp	r2, r3
 8006090:	d903      	bls.n	800609a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006098:	e0f4      	b.n	8006284 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	2200      	movs	r2, #0
 800609e:	461c      	mov	r4, r3
 80060a0:	4615      	mov	r5, r2
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	022b      	lsls	r3, r5, #8
 80060ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060b0:	0222      	lsls	r2, r4, #8
 80060b2:	68f9      	ldr	r1, [r7, #12]
 80060b4:	6849      	ldr	r1, [r1, #4]
 80060b6:	0849      	lsrs	r1, r1, #1
 80060b8:	2000      	movs	r0, #0
 80060ba:	4688      	mov	r8, r1
 80060bc:	4681      	mov	r9, r0
 80060be:	eb12 0a08 	adds.w	sl, r2, r8
 80060c2:	eb43 0b09 	adc.w	fp, r3, r9
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	603b      	str	r3, [r7, #0]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d4:	4650      	mov	r0, sl
 80060d6:	4659      	mov	r1, fp
 80060d8:	f7fa fc90 	bl	80009fc <__aeabi_uldivmod>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4613      	mov	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ea:	d308      	bcc.n	80060fe <UART_SetConfig+0x2b2>
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f2:	d204      	bcs.n	80060fe <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	60da      	str	r2, [r3, #12]
 80060fc:	e0c2      	b.n	8006284 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006104:	e0be      	b.n	8006284 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800610e:	d16a      	bne.n	80061e6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006114:	2b08      	cmp	r3, #8
 8006116:	d834      	bhi.n	8006182 <UART_SetConfig+0x336>
 8006118:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <UART_SetConfig+0x2d4>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	08006145 	.word	0x08006145
 8006124:	08006165 	.word	0x08006165
 8006128:	0800616d 	.word	0x0800616d
 800612c:	08006183 	.word	0x08006183
 8006130:	08006173 	.word	0x08006173
 8006134:	08006183 	.word	0x08006183
 8006138:	08006183 	.word	0x08006183
 800613c:	08006183 	.word	0x08006183
 8006140:	0800617b 	.word	0x0800617b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006144:	f7fe f80c 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 8006148:	61f8      	str	r0, [r7, #28]
        break;
 800614a:	e020      	b.n	800618e <UART_SetConfig+0x342>
 800614c:	efff69f3 	.word	0xefff69f3
 8006150:	40008000 	.word	0x40008000
 8006154:	40013800 	.word	0x40013800
 8006158:	40021000 	.word	0x40021000
 800615c:	40004400 	.word	0x40004400
 8006160:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006164:	f7fe f812 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8006168:	61f8      	str	r0, [r7, #28]
        break;
 800616a:	e010      	b.n	800618e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800616c:	4b4c      	ldr	r3, [pc, #304]	; (80062a0 <UART_SetConfig+0x454>)
 800616e:	61fb      	str	r3, [r7, #28]
        break;
 8006170:	e00d      	b.n	800618e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006172:	f7fd ff5d 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8006176:	61f8      	str	r0, [r7, #28]
        break;
 8006178:	e009      	b.n	800618e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800617a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617e:	61fb      	str	r3, [r7, #28]
        break;
 8006180:	e005      	b.n	800618e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800618c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d077      	beq.n	8006284 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	005a      	lsls	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	085b      	lsrs	r3, r3, #1
 800619e:	441a      	add	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b0f      	cmp	r3, #15
 80061ae:	d916      	bls.n	80061de <UART_SetConfig+0x392>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b6:	d212      	bcs.n	80061de <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f023 030f 	bic.w	r3, r3, #15
 80061c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	8afb      	ldrh	r3, [r7, #22]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	8afa      	ldrh	r2, [r7, #22]
 80061da:	60da      	str	r2, [r3, #12]
 80061dc:	e052      	b.n	8006284 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061e4:	e04e      	b.n	8006284 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061ea:	2b08      	cmp	r3, #8
 80061ec:	d827      	bhi.n	800623e <UART_SetConfig+0x3f2>
 80061ee:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0x3a8>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	08006219 	.word	0x08006219
 80061f8:	08006221 	.word	0x08006221
 80061fc:	08006229 	.word	0x08006229
 8006200:	0800623f 	.word	0x0800623f
 8006204:	0800622f 	.word	0x0800622f
 8006208:	0800623f 	.word	0x0800623f
 800620c:	0800623f 	.word	0x0800623f
 8006210:	0800623f 	.word	0x0800623f
 8006214:	08006237 	.word	0x08006237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006218:	f7fd ffa2 	bl	8004160 <HAL_RCC_GetPCLK1Freq>
 800621c:	61f8      	str	r0, [r7, #28]
        break;
 800621e:	e014      	b.n	800624a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006220:	f7fd ffb4 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8006224:	61f8      	str	r0, [r7, #28]
        break;
 8006226:	e010      	b.n	800624a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006228:	4b1d      	ldr	r3, [pc, #116]	; (80062a0 <UART_SetConfig+0x454>)
 800622a:	61fb      	str	r3, [r7, #28]
        break;
 800622c:	e00d      	b.n	800624a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800622e:	f7fd feff 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8006232:	61f8      	str	r0, [r7, #28]
        break;
 8006234:	e009      	b.n	800624a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800623a:	61fb      	str	r3, [r7, #28]
        break;
 800623c:	e005      	b.n	800624a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006248:	bf00      	nop
    }

    if (pclk != 0U)
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d019      	beq.n	8006284 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	085a      	lsrs	r2, r3, #1
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	441a      	add	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006262:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b0f      	cmp	r3, #15
 8006268:	d909      	bls.n	800627e <UART_SetConfig+0x432>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006270:	d205      	bcs.n	800627e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60da      	str	r2, [r3, #12]
 800627c:	e002      	b.n	8006284 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006290:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006294:	4618      	mov	r0, r3
 8006296:	3728      	adds	r7, #40	; 0x28
 8006298:	46bd      	mov	sp, r7
 800629a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800629e:	bf00      	nop
 80062a0:	00f42400 	.word	0x00f42400

080062a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	f003 0310 	and.w	r3, r3, #16
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00a      	beq.n	8006356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	430a      	orrs	r2, r1
 8006354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01a      	beq.n	80063ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063a2:	d10a      	bne.n	80063ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	605a      	str	r2, [r3, #4]
  }
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b098      	sub	sp, #96	; 0x60
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063f8:	f7fb fbca 	bl	8001b90 <HAL_GetTick>
 80063fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0308 	and.w	r3, r3, #8
 8006408:	2b08      	cmp	r3, #8
 800640a:	d12e      	bne.n	800646a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800640c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006414:	2200      	movs	r2, #0
 8006416:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f88c 	bl	8006538 <UART_WaitOnFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d021      	beq.n	800646a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800643a:	653b      	str	r3, [r7, #80]	; 0x50
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006444:	647b      	str	r3, [r7, #68]	; 0x44
 8006446:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800644a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800644c:	e841 2300 	strex	r3, r2, [r1]
 8006450:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e6      	bne.n	8006426 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2220      	movs	r2, #32
 800645c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e062      	b.n	8006530 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b04      	cmp	r3, #4
 8006476:	d149      	bne.n	800650c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006480:	2200      	movs	r2, #0
 8006482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f856 	bl	8006538 <UART_WaitOnFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d03c      	beq.n	800650c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	623b      	str	r3, [r7, #32]
   return(result);
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b0:	633b      	str	r3, [r7, #48]	; 0x30
 80064b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e6      	bne.n	8006492 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3308      	adds	r3, #8
 80064ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	64bb      	str	r3, [r7, #72]	; 0x48
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3308      	adds	r3, #8
 80064e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e4:	61fa      	str	r2, [r7, #28]
 80064e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	69b9      	ldr	r1, [r7, #24]
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	617b      	str	r3, [r7, #20]
   return(result);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e5      	bne.n	80064c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e011      	b.n	8006530 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3758      	adds	r7, #88	; 0x58
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006548:	e049      	b.n	80065de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d045      	beq.n	80065de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006552:	f7fb fb1d 	bl	8001b90 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	429a      	cmp	r2, r3
 8006560:	d302      	bcc.n	8006568 <UART_WaitOnFlagUntilTimeout+0x30>
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e048      	b.n	80065fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d031      	beq.n	80065de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b08      	cmp	r3, #8
 8006586:	d110      	bne.n	80065aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2208      	movs	r2, #8
 800658e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f838 	bl	8006606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2208      	movs	r2, #8
 800659a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e029      	b.n	80065fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b8:	d111      	bne.n	80065de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f81e 	bl	8006606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e00f      	b.n	80065fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4013      	ands	r3, r2
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	bf0c      	ite	eq
 80065ee:	2301      	moveq	r3, #1
 80065f0:	2300      	movne	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d0a6      	beq.n	800654a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006606:	b480      	push	{r7}
 8006608:	b095      	sub	sp, #84	; 0x54
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	461a      	mov	r2, r3
 800662a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662c:	643b      	str	r3, [r7, #64]	; 0x40
 800662e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e6      	bne.n	800660e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3308      	adds	r3, #8
 8006646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f023 0301 	bic.w	r3, r3, #1
 8006656:	64bb      	str	r3, [r7, #72]	; 0x48
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3308      	adds	r3, #8
 800665e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e5      	bne.n	8006640 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006678:	2b01      	cmp	r3, #1
 800667a:	d118      	bne.n	80066ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	60bb      	str	r3, [r7, #8]
   return(result);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f023 0310 	bic.w	r3, r3, #16
 8006690:	647b      	str	r3, [r7, #68]	; 0x44
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	6979      	ldr	r1, [r7, #20]
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	613b      	str	r3, [r7, #16]
   return(result);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e6      	bne.n	800667c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80066c2:	bf00      	nop
 80066c4:	3754      	adds	r7, #84	; 0x54
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <memset>:
 80066ce:	4402      	add	r2, r0
 80066d0:	4603      	mov	r3, r0
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d100      	bne.n	80066d8 <memset+0xa>
 80066d6:	4770      	bx	lr
 80066d8:	f803 1b01 	strb.w	r1, [r3], #1
 80066dc:	e7f9      	b.n	80066d2 <memset+0x4>
	...

080066e0 <__libc_init_array>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	4d0d      	ldr	r5, [pc, #52]	; (8006718 <__libc_init_array+0x38>)
 80066e4:	4c0d      	ldr	r4, [pc, #52]	; (800671c <__libc_init_array+0x3c>)
 80066e6:	1b64      	subs	r4, r4, r5
 80066e8:	10a4      	asrs	r4, r4, #2
 80066ea:	2600      	movs	r6, #0
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	d109      	bne.n	8006704 <__libc_init_array+0x24>
 80066f0:	4d0b      	ldr	r5, [pc, #44]	; (8006720 <__libc_init_array+0x40>)
 80066f2:	4c0c      	ldr	r4, [pc, #48]	; (8006724 <__libc_init_array+0x44>)
 80066f4:	f000 f826 	bl	8006744 <_init>
 80066f8:	1b64      	subs	r4, r4, r5
 80066fa:	10a4      	asrs	r4, r4, #2
 80066fc:	2600      	movs	r6, #0
 80066fe:	42a6      	cmp	r6, r4
 8006700:	d105      	bne.n	800670e <__libc_init_array+0x2e>
 8006702:	bd70      	pop	{r4, r5, r6, pc}
 8006704:	f855 3b04 	ldr.w	r3, [r5], #4
 8006708:	4798      	blx	r3
 800670a:	3601      	adds	r6, #1
 800670c:	e7ee      	b.n	80066ec <__libc_init_array+0xc>
 800670e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006712:	4798      	blx	r3
 8006714:	3601      	adds	r6, #1
 8006716:	e7f2      	b.n	80066fe <__libc_init_array+0x1e>
 8006718:	08006940 	.word	0x08006940
 800671c:	08006940 	.word	0x08006940
 8006720:	08006940 	.word	0x08006940
 8006724:	08006944 	.word	0x08006944

08006728 <memcpy>:
 8006728:	440a      	add	r2, r1
 800672a:	4291      	cmp	r1, r2
 800672c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006730:	d100      	bne.n	8006734 <memcpy+0xc>
 8006732:	4770      	bx	lr
 8006734:	b510      	push	{r4, lr}
 8006736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800673a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800673e:	4291      	cmp	r1, r2
 8006740:	d1f9      	bne.n	8006736 <memcpy+0xe>
 8006742:	bd10      	pop	{r4, pc}

08006744 <_init>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	bf00      	nop
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr

08006750 <_fini>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr
